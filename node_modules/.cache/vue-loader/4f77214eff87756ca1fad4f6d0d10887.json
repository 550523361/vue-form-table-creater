{"remainingRequest":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/src/views/templateModuleManager/list/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/src/views/templateModuleManager/list/index.vue","mtime":1553590927201},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport backendService from '../../../components/remoteService/backendService'\nimport listTable from '../../../components/tableList/listTable'\nimport baseTableConfig from '../../../components/tableList/TabListConfig'\nimport addQueryElement from '../../../components/formCreater/addQueryElement'\nimport createFormElement from '../../../components/formCreater/createFormElement'\nimport {formatDate} from '../../../components/format/format'\nimport validate from './../../../components/validate/validate'\nimport formCreater from './../../../components/formCreater/baseFormCreater'\n\nlet tableListConfig=JSON.parse(JSON.stringify(baseTableConfig));\n\nlet baseBtnStyle=tableListConfig.baseBtnStyle;\nimport moduleConfigTemplateData from './../config/moduleConfig'\n\nlet moduleConfigData = moduleConfigTemplateData;\n\nexport default {\n    name: 'list',\n    components:{\n        'list-table':listTable,\n        'add-element':addQueryElement,\n        'create-form-element':createFormElement,\n        'form-creater':formCreater,\n    },\n    data(){\n        return{\n            formatUtil:formatDate,\n            tableListConfig:{columns:[],splitTables:1,operator:{width:200,columns:[]},url:'',selection:false},\n            queryConfig:{queryElements:[]},\n            moduleConfig:{editable:'',menuConfig:[]},\n            chooseIds:[],\n            readonly:{},\n            validate:validate,\n\n            formCreateConfig:{\n                queryElements:[],\n                cancle:this.cancle,\n                cancleBtnStyle:{\n                    display:'none'\n                },\n                saveBtnlabel:'保存信息',\n                editorFormHandler:this.editorFormHandler,\n                editorModule:true\n            },\n        }\n    },\n    methods:{\n        prompt(context){\n            context.$prompt('请输入邮箱', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                inputPattern: /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/,\n                inputErrorMessage: '邮箱格式不正确'\n            }).then(({ value }) => {\n                context.$message({\n                    type: 'success',\n                    message: '你的邮箱是: ' + value\n                });\n            }).catch(() => {\n                context.$message({\n                    type: 'info',\n                    message: '取消输入'\n                });\n            });\n        },\n        exportDataHandler(param,btnInfo){\n            //console.log(\"param,btnInfo\",param,btnInfo)\n            let url=btnInfo.url;\n            let copyIds=JSON.parse(JSON.stringify(this.chooseIds));\n            let ids=copyIds.map(item=>item.id).join(\",\");\n            let queryParam=\"?1=1\";\n            if(ids){\n                queryParam+=\"&ids=\"+ids;\n            }\n            //console.log(\"param\",param,this.chooseIds)\n            Object.keys(param).forEach(key=>{\n                if(param[key]){\n                    if(key == \"timeRange\"){\n                        if(param[\"timeRange\"]){\n                            if(param[\"timeRange\"][0]){\n                                queryParam+=\"&startTime=\"+this.formatUtil(param[\"timeRange\"][0],\"yyyy-MM-dd hh:mm:ss\");\n                            }\n                            if(param[\"timeRange\"][1]){\n                                queryParam+=\"&endTime=\"+this.formatUtil(param[\"timeRange\"][1],\"yyyy-MM-dd hh:mm:ss\");\n                            }\n                        }\n                    }else{\n                        queryParam+=\"&\"+key+\"=\"+param[key];\n                    }\n                }\n            })\n\n            if(btnInfo.exportsParam){\n                Object.keys(btnInfo.exportsParam).forEach(key=>{\n                    if(!param[key]){\n                        queryParam+=\"&\"+key+\"=\"+(param[key]||(this.tableListConfig.query||{})[key]);\n                    }\n                })\n            }\n\n            backendService.download({\n                url:url+queryParam\n            })\n        },\n        deleteRowHandler(rowData,btnInfo){\n            console.log(rowData,btnInfo)\n            let url=btnInfo.url;\n            let that = this;\n            let textTemplate=[JSON.parse(JSON.stringify(btnInfo.deleteTipText))];\n            if(typeof btnInfo.deleteTipText === \"string\"){\n\n            }else if(typeof btnInfo.deleteTipText === \"object\"){\n                textTemplate=[JSON.parse(JSON.stringify(btnInfo.deleteTipText[rowData[btnInfo.prop]]))]\n            }\n\n            textTemplate=textTemplate.map((item,index)=>{\n                if(/(#+([a-zA-Z]+)#+)/g.test(item)){\n                    let tarText=/(#+([a-zA-Z]+)#+)/g.exec(item)[0];\n                    let propertyText=/(#+([a-zA-Z]+)#+)/g.exec(item)[2];\n                    item=item.replace(tarText,rowData[propertyText]||'');\n                }\n                return item;\n            })\n\n\n            let deleteParam=JSON.parse(JSON.stringify(btnInfo.deleteParam));\n            let deletePostParam={};\n            Object.keys(deleteParam).forEach(key=>{\n                if(typeof deleteParam[key]  === \"object\"){\n                    console.log(key +\"==>\"+deleteParam[key]+\"==>\"+deleteParam[key][rowData[key]]+\"-->\"+rowData[key]);\n                    deletePostParam[key]=deleteParam[key][rowData[key]];\n                }else{\n                    deletePostParam[key]=rowData[key];\n                    //console.log(key +\"==>\"+deleteParam[key]+\"-->\"+rowData[key])\n                }\n            })\n            return this.$confirm(textTemplate.join(\"\")||'确定要删除该记录?',\"确认信息\", {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).then(success=>{\n                return backendService.getData({\n                    url:url,\n                    method:\"post\",\n                    data:deletePostParam\n                }).then(function (data) {\n                    if(data.code == '1'){\n                        that.$message({\n                            message: '操作成功',\n                            type: 'success'\n                        });\n                        return Promise.resolve({code:1,msg:'freshPage'})\n                    }else{\n                        that.$message({\n                            message: data.msg,\n                            type: 'error'\n                        });\n                    }\n                })\n            },error=>{\n                return Promise.reject({code:0,msg:\"不用刷新列表用户取消操作\"})\n            })\n        },\n        clickHandler(param,btnInfo,...params){\n            //console.log(\"clickHandler\",param,btnInfo)\n            if(btnInfo.exportBtn){\n                this.exportDataHandler(param,btnInfo,...params);\n                return;\n            }\n            if(btnInfo.url){\n                let url=btnInfo.url;\n                console.log(param,url,...params,this)\n                url=this.replaceTemplate(param,url,this.config.query);\n                this.$router.push(url);\n                return;\n            }\n            this.moduleConfig.clickHandler&&this.moduleConfig.clickHandler(this,param,btnInfo,...params)\n        },\n        pagerDataHelper(param){\n            //console.log(\"pagerDataHelper********\",param);\n            param.content.map(item=>{return item;})\n            return this.moduleConfig.pagerDataHelper&&this.moduleConfig.pagerDataHelper(param)||param;\n        },\n        errorDataHelper(param){\n            console.log(\"pagerDataHelper***>>>>>>>>>>>>>*****\",param);\n            param.content.map(item=>{return item;})\n            return this.moduleConfig.errorDataHelper&&this.moduleConfig.errorDataHelper(param)||param;\n        },\n        clickConfig(param){\n            //console.log(\"clickConfig***++++++*****\",param);\n            this.moduleConfig.clickConfig&&this.moduleConfig.clickConfig(param)\n        },\n        handleClose(param){\n            this.moduleConfig.handleClose&&this.moduleConfig.handleClose(param)\n        },\n        dataBus(configInfo,elementInfo,elementTypeInfo){\n            this.moduleConfig.dataBus&&this.moduleConfig.dataBus(this,configInfo,elementInfo,elementTypeInfo)\n        },\n        enterHandler(...params){\n            //console.log(\"enterHandler\",params)\n            this.moduleConfig.enterHandler?this.moduleConfig.enterHandler(params):this.defaultHandler(params)\n        },\n        columnClickHandler(...params){\n            //console.log(\"columnClickHandler\",params)\n            this.moduleConfig.columnClickHandler?this.moduleConfig.columnClickHandler(...params,this):this.defaultHandler(...params)\n        },\n        hoverHandler(...params){\n            //console.log(\"hoverHandler\",params)\n            this.moduleConfig.hoverHandler?this.moduleConfig.hoverHandler(params):this.defaultHandler(params)\n        },\n        defaultHandler(...params){\n            //console.log(\"defaultHandler\",params)\n            this.moduleConfig.defaultHandler?this.moduleConfig.defaultHandler(params):''\n        },\n        initColumn(){\n            let that=this;\n            let columnWidthAuto=0;\n            this.tableListConfig.columns.map((column,index)=>{\n                if(column.width==\"auto\"){\n                    ++columnWidthAuto;\n                }\n\n                if(index==(that.tableListConfig.columns.length-1)&&columnWidthAuto==0){\n                    column.width=\"auto\";\n                }\n                if(column.addEventListener){\n                    column.addEventListener.map(eventName=>{\n                        let eventHandlerName=eventName;\n                        //console.log(column.prop,\"eventName\",eventName)\n                        if(eventName==\"click\"){\n                            eventHandlerName=\"columnClick\";\n                        }\n                        column[eventName]=that[eventHandlerName+\"Handler\"]||that.defaultHandler;\n                    })\n                }\n                let elementInfo=column;\n                if(that.$route.params.moduleName!=\"createTableList\"&&elementInfo.columnHandlerText){\n                    elementInfo.columnHandler=(data)=>{\n                        //console.log(\"*********>\",Array.isArray(data),data)\n                        let compiledText=\"\";\n                        if(Array.isArray(data)){\n                            compiledText=data.map(objectItem=>{\n                                let textTemplate=JSON.parse(JSON.stringify(elementInfo.columnHandlerText));\n                                textTemplate=textTemplate.map((item,index)=>{\n                                    let tarText=/(#+([a-zA-Z]+)#+)/g.exec(item)[0];\n                                    let propertyText=/(#+([a-zA-Z]+)#+)/g.exec(item)[2];\n                                    item=item.replace(tarText,objectItem[propertyText]||'');\n                                    return item;\n                                })\n                                return textTemplate.join(\"\");\n                            })\n                        }else{\n                            let text=elementInfo.columnHandlerText;\n                            if(!Array.isArray(text)){\n                                text=[text];\n                            }\n                            compiledText=text.map((item,index)=>{\n                                if(/(#+([a-zA-Z]+)#+)/g.test(item)){\n                                    let tarText=/(#+([a-zA-Z]+)#+)/g.exec(item)[0];\n                                    let propertyText=/(#+([a-zA-Z]+)#+)/g.exec(item)[2];\n                                    item=item.replace(tarText,data[propertyText]||'');\n                                }\n                                return item;\n                            })\n                        }\n                        return compiledText.join(\"\");\n                    }\n                }\n            })\n        },\n        initPage(){\n            let that = this;\n\n            let moduleConfig=moduleConfigData.getConfig()[this.$route.params.moduleName];\n            that.moduleConfig=moduleConfig;\n\n            console.log(\"moduleConfig>>>>>>\",moduleConfig,this.$route.params)\n\n            if(!moduleConfig){\n                alert(\"配置模块\"+this.$route.params.moduleName+\"未找到,请检查配置\");\n                return;\n            }\n            let queryElements=moduleConfig.queryElements;\n            tableListConfig.url=moduleConfig.url;\n            //tableListConfig.query=Object.assign(,moduleConfig.query);//moduleConfig.query||\n            let queryParam=moduleConfig.query||{\n                pageNum: 1,\n                pageSize: 15,\n            };\n            Object.keys(moduleConfig.query||{}).forEach(key=>{\n                queryParam[key]=this.$route.params[moduleConfig.query[key]]||''\n            })\n\n            if(moduleConfig.readonly){\n                that.readonly=moduleConfig.query;\n            }\n\n            tableListConfig.query=queryParam;\n            //console.log(\"----====>>>>\",tableListConfig.query,queryParam)\n            tableListConfig.columns=moduleConfig.columns;\n\n            queryElements.map(item=>{\n                if(queryParam[item.prop]!=undefined&&queryParam[item.prop]!=\"\"){\n                    item.defaultValue=queryParam[item.prop];\n                    item.value=queryParam[item.prop];\n                }\n            })\n\n            that.queryConfig.queryElements=queryElements;\n            that.queryConfig.containerStyle=moduleConfig.containerStyle;\n            moduleConfig.operator.columns.map(item=>{\n                if(!item.click){\n                    if(item.confirmDel){\n                        item.click=that.deleteRowHandler;\n                    }else{\n                        item.click=that.clickHandler;\n                    }\n                }\n                if(item.viewHandler==true){\n                    item.viewHandler=(btnInfo,rowData,queryParam,otherData)=>{\n                        return btnInfo.map[rowData[btnInfo.prop]]\n                    }\n                }\n                item.style=Object.assign(JSON.parse(JSON.stringify(baseBtnStyle)),item.style);\n                return item;\n            });\n\n            tableListConfig.operator=moduleConfig.operator;\n            tableListConfig.selection=moduleConfig.selection;\n            tableListConfig.splitTables=moduleConfig.splitTables||that.tableListConfig.splitTables;\n            tableListConfig.pagerDataHelper=moduleConfig.pagerDataHelper||that.pagerDataHelper;\n            tableListConfig.errorDataHelper=moduleConfig.errorDataHelper||that.errorDataHelper;\n            tableListConfig.chooseAllClick=that.chooseAllClick;\n            tableListConfig.clickConfig=that.clickConfig;\n\n            that.tableListConfig=tableListConfig;\n\n            this.initColumn();\n\n\n            this.$refs.tableList&&this.$refs.tableList.fresh('commonModule');\n        },\n        initWatch(){\n            let that=this;\n            this.$watch(\"moduleConfig.menuConfig\",function (newData,oldData) {\n                this.moduleConfig.menuConfig=newData;\n                console.log(\"*******>menuConfig>>>>>>>>\",newData)\n            },{\n                deep:true\n            })\n\n            this.$watch(\"tableListConfig.columns\",function (newData,oldData) {\n               // this.initColumn(newData,oldData);\n            },{\n                deep:true\n            })\n            this.$watch(\"moduleConfig.queryElements\",function (newData,oldData) {\n                this.queryConfig.queryElements=newData;\n            },{\n                deep:true\n            })\n\n            this.$watch(\"moduleConfig.operator.columns\",function (newData,oldData) {\n                that.moduleConfig.operator.columns.map(item=>{\n                    //console.log(item)\n                    if(!item.click){\n                        if(item.confirmDel){\n                            item.click=that.deleteRowHandler;\n                        }else{\n                            item.click=that.clickHandler;\n                        }\n                    }\n                    if(item.viewHandler==true){\n                        item.viewHandler=(btnInfo,rowData,queryParam,otherData)=>{\n                            return btnInfo.map[rowData[btnInfo.prop]]\n                        }\n                    }\n                    item.style=Object.assign(JSON.parse(JSON.stringify(baseBtnStyle)),item.style);\n                    return item;\n                });\n            },{\n                deep:false\n            })\n\n            this.$watch(\"moduleConfig.url\",function (newData,oldData) {\n                that.tableListConfig.url=newData;\n            })\n        },\n        chooseAllClick(...params){\n            //console.log(\"chooseAllClick\",...params);\n            this.chooseIds=params[0];\n        },\n        getObjectValue(target ,prop,otherParam){//获取属性值 属性不争取返回空 可以获取类似 student.school.address.no 深层次获取\n            let props=prop.split(\".\");\n            let i=0;\n            let tempValue=target;\n            while (props.length-i>=1){\n                if(!tempValue){\n                    console.log(\"****为空***=---->\",props[i])\n                    break;\n                }\n                tempValue=tempValue[props[i]];\n                tempValue=tempValue==undefined?otherParam[props[i]]:tempValue;\n                i++;\n            }\n            return tempValue;\n        },\n        replaceTemplate(target,templateText,otherParam) {\n            let result=null;\n            let patt = new RegExp(\"#{2}(\\s+)?[\\.a-zA-Z\\d]+(\\s+)?#{2}\",\"g\");\n\n            console.log(\"target,templateText,otherParam\",target,templateText,otherParam)\n            let replaceText=[];\n            while ((result=patt.exec(templateText))!=null){\n                let props=result[0];\n                let getResult=this.getObjectValue(target,props.replace(/#+/g,\"\"),otherParam);\n                if(getResult===''){\n                    getResult=null;\n                }\n                replaceText.push({\n                    template:result[0],\n                    value:getResult\n                })\n            }\n\n            replaceText.forEach(replaceItem=>{\n                templateText=templateText.replace(replaceItem.template,replaceItem.value)\n            })\n\n            return templateText;\n        },\n        downLoad(){\n            let file=new File(['let config='+JSON.stringify(this.config,null,4)],{\n                type: 'text',\n                encoding: 'UTF-8'\n            });\n\n            var a = document.createElement('a');\n            a.href = URL.createObjectURL(file);\n            a.download ='列表配置.js';\n            a.click();\n\n        },\n        getService(){\n            return backendService;\n        },\n        editorFormHandler(...params){\n            //console.log(\"defaultHandler\",params)\n            this.moduleConfig.editorFormHandler?this.moduleConfig.editorFormHandler(this,...params):''\n        },\n    },\n    created(){\n        this.initPage();\n        this.initWatch();\n\n    },\n    mounted(){\n        /*var editor = ace.edit(\"ace\");\n        editor.setTheme(\"ace/theme/twilight\");\n        editor.session.setMode(\"ace/mode/javascript\");\n        editor.setOptions({\n            enableBasicAutocompletion: true,\n            enableSnippets: true,\n            enableLiveAutocompletion: false\n        });\n        editor.setValue(`\n          ${JSON.stringify(this.moduleConfig,null,4)}\n        `)*/\n    },\n    watch:{\n        '$route'(to,from){\n            //console.log(\"this.$route.params\",this.$route.params)\n            this.initPage();\n        }\n    },\n    computed:{\n        config:function () {\n            let copyData=JSON.parse(JSON.stringify(this.tableListConfig));\n            return Object.assign(copyData,this.queryConfig)\n        },\n        choosedIdMap:function () {\n            let dataMap={};\n            this.chooseIds.forEach(item=>{\n                dataMap[item.id]=item.id;\n            })\n            return dataMap;\n        }\n    }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAofile":"index.vue","sourceRoot":"src/views/templateModuleManager/list","sourcesContent":["<template>\n  <div class=\"main\">\n    <div class=\"content\">\n      <div class=\"list\">\n        <div style=\"padding:0px 10px;background: #fff;\">\n          <list-table v-if=\"moduleConfig.editable!='create-form-element'\" :config=\"{tableListConfig,queryConfig,clickHandler,form:'merchant',readonly:readonly}\" ref=\"tableList\"></list-table>\n          <form-creater v-if=\"formCreateConfig.queryElements.length>0\" :config=\"formCreateConfig\" ref=\"formCreater\"></form-creater>\n          <add-element v-if=\"moduleConfig.editable=='add-element'\" :config=\"{dataBus:dataBus}\"></add-element>\n          <create-form-element v-if=\"moduleConfig.editable == 'create-form-element'\" :config=\"{dataBus:dataBus}\"></create-form-element>\n          <div style=\"margin-top: 20px;\" v-if=\"moduleConfig.editable=='add-element'\">\n            <textarea style=\"width: 100%;\" rows=\"35\" readonly v-model=\"JSON.stringify(config,null,4)\"/>\n            <!--<button @click=\"downLoad()\">导出内容</button>-->\n          </div>\n        </div>\n      </div>\n      <router-view></router-view>\n    </div>\n  </div>\n</template>\n<script>\n  import backendService from '../../../components/remoteService/backendService'\n  import listTable from '../../../components/tableList/listTable'\n  import baseTableConfig from '../../../components/tableList/TabListConfig'\n  import addQueryElement from '../../../components/formCreater/addQueryElement'\n  import createFormElement from '../../../components/formCreater/createFormElement'\n  import {formatDate} from '../../../components/format/format'\n  import validate from './../../../components/validate/validate'\n  import formCreater from './../../../components/formCreater/baseFormCreater'\n\n  let tableListConfig=JSON.parse(JSON.stringify(baseTableConfig));\n\n  let baseBtnStyle=tableListConfig.baseBtnStyle;\n  import moduleConfigTemplateData from './../config/moduleConfig'\n\n  let moduleConfigData = moduleConfigTemplateData;\n\n  export default {\n      name: 'list',\n      components:{\n          'list-table':listTable,\n          'add-element':addQueryElement,\n          'create-form-element':createFormElement,\n          'form-creater':formCreater,\n      },\n      data(){\n          return{\n              formatUtil:formatDate,\n              tableListConfig:{columns:[],splitTables:1,operator:{width:200,columns:[]},url:'',selection:false},\n              queryConfig:{queryElements:[]},\n              moduleConfig:{editable:'',menuConfig:[]},\n              chooseIds:[],\n              readonly:{},\n              validate:validate,\n\n              formCreateConfig:{\n                  queryElements:[],\n                  cancle:this.cancle,\n                  cancleBtnStyle:{\n                      display:'none'\n                  },\n                  saveBtnlabel:'保存信息',\n                  editorFormHandler:this.editorFormHandler,\n                  editorModule:true\n              },\n          }\n      },\n      methods:{\n          prompt(context){\n              context.$prompt('请输入邮箱', '提示', {\n                  confirmButtonText: '确定',\n                  cancelButtonText: '取消',\n                  inputPattern: /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/,\n                  inputErrorMessage: '邮箱格式不正确'\n              }).then(({ value }) => {\n                  context.$message({\n                      type: 'success',\n                      message: '你的邮箱是: ' + value\n                  });\n              }).catch(() => {\n                  context.$message({\n                      type: 'info',\n                      message: '取消输入'\n                  });\n              });\n          },\n          exportDataHandler(param,btnInfo){\n              //console.log(\"param,btnInfo\",param,btnInfo)\n              let url=btnInfo.url;\n              let copyIds=JSON.parse(JSON.stringify(this.chooseIds));\n              let ids=copyIds.map(item=>item.id).join(\",\");\n              let queryParam=\"?1=1\";\n              if(ids){\n                  queryParam+=\"&ids=\"+ids;\n              }\n              //console.log(\"param\",param,this.chooseIds)\n              Object.keys(param).forEach(key=>{\n                  if(param[key]){\n                      if(key == \"timeRange\"){\n                          if(param[\"timeRange\"]){\n                              if(param[\"timeRange\"][0]){\n                                  queryParam+=\"&startTime=\"+this.formatUtil(param[\"timeRange\"][0],\"yyyy-MM-dd hh:mm:ss\");\n                              }\n                              if(param[\"timeRange\"][1]){\n                                  queryParam+=\"&endTime=\"+this.formatUtil(param[\"timeRange\"][1],\"yyyy-MM-dd hh:mm:ss\");\n                              }\n                          }\n                      }else{\n                          queryParam+=\"&\"+key+\"=\"+param[key];\n                      }\n                  }\n              })\n\n              if(btnInfo.exportsParam){\n                  Object.keys(btnInfo.exportsParam).forEach(key=>{\n                      if(!param[key]){\n                          queryParam+=\"&\"+key+\"=\"+(param[key]||(this.tableListConfig.query||{})[key]);\n                      }\n                  })\n              }\n\n              backendService.download({\n                  url:url+queryParam\n              })\n          },\n          deleteRowHandler(rowData,btnInfo){\n              console.log(rowData,btnInfo)\n              let url=btnInfo.url;\n              let that = this;\n              let textTemplate=[JSON.parse(JSON.stringify(btnInfo.deleteTipText))];\n              if(typeof btnInfo.deleteTipText === \"string\"){\n\n              }else if(typeof btnInfo.deleteTipText === \"object\"){\n                  textTemplate=[JSON.parse(JSON.stringify(btnInfo.deleteTipText[rowData[btnInfo.prop]]))]\n              }\n\n              textTemplate=textTemplate.map((item,index)=>{\n                  if(/(#+([a-zA-Z]+)#+)/g.test(item)){\n                      let tarText=/(#+([a-zA-Z]+)#+)/g.exec(item)[0];\n                      let propertyText=/(#+([a-zA-Z]+)#+)/g.exec(item)[2];\n                      item=item.replace(tarText,rowData[propertyText]||'');\n                  }\n                  return item;\n              })\n\n\n              let deleteParam=JSON.parse(JSON.stringify(btnInfo.deleteParam));\n              let deletePostParam={};\n              Object.keys(deleteParam).forEach(key=>{\n                  if(typeof deleteParam[key]  === \"object\"){\n                      console.log(key +\"==>\"+deleteParam[key]+\"==>\"+deleteParam[key][rowData[key]]+\"-->\"+rowData[key]);\n                      deletePostParam[key]=deleteParam[key][rowData[key]];\n                  }else{\n                      deletePostParam[key]=rowData[key];\n                      //console.log(key +\"==>\"+deleteParam[key]+\"-->\"+rowData[key])\n                  }\n              })\n              return this.$confirm(textTemplate.join(\"\")||'确定要删除该记录?',\"确认信息\", {\n                  confirmButtonText: '确定',\n                  cancelButtonText: '取消',\n                  type: 'warning'\n              }).then(success=>{\n                  return backendService.getData({\n                      url:url,\n                      method:\"post\",\n                      data:deletePostParam\n                  }).then(function (data) {\n                      if(data.code == '1'){\n                          that.$message({\n                              message: '操作成功',\n                              type: 'success'\n                          });\n                          return Promise.resolve({code:1,msg:'freshPage'})\n                      }else{\n                          that.$message({\n                              message: data.msg,\n                              type: 'error'\n                          });\n                      }\n                  })\n              },error=>{\n                  return Promise.reject({code:0,msg:\"不用刷新列表用户取消操作\"})\n              })\n          },\n          clickHandler(param,btnInfo,...params){\n              //console.log(\"clickHandler\",param,btnInfo)\n              if(btnInfo.exportBtn){\n                  this.exportDataHandler(param,btnInfo,...params);\n                  return;\n              }\n              if(btnInfo.url){\n                  let url=btnInfo.url;\n                  console.log(param,url,...params,this)\n                  url=this.replaceTemplate(param,url,this.config.query);\n                  this.$router.push(url);\n                  return;\n              }\n              this.moduleConfig.clickHandler&&this.moduleConfig.clickHandler(this,param,btnInfo,...params)\n          },\n          pagerDataHelper(param){\n              //console.log(\"pagerDataHelper********\",param);\n              param.content.map(item=>{return item;})\n              return this.moduleConfig.pagerDataHelper&&this.moduleConfig.pagerDataHelper(param)||param;\n          },\n          errorDataHelper(param){\n              console.log(\"pagerDataHelper***>>>>>>>>>>>>>*****\",param);\n              param.content.map(item=>{return item;})\n              return this.moduleConfig.errorDataHelper&&this.moduleConfig.errorDataHelper(param)||param;\n          },\n          clickConfig(param){\n              //console.log(\"clickConfig***++++++*****\",param);\n              this.moduleConfig.clickConfig&&this.moduleConfig.clickConfig(param)\n          },\n          handleClose(param){\n              this.moduleConfig.handleClose&&this.moduleConfig.handleClose(param)\n          },\n          dataBus(configInfo,elementInfo,elementTypeInfo){\n              this.moduleConfig.dataBus&&this.moduleConfig.dataBus(this,configInfo,elementInfo,elementTypeInfo)\n          },\n          enterHandler(...params){\n              //console.log(\"enterHandler\",params)\n              this.moduleConfig.enterHandler?this.moduleConfig.enterHandler(params):this.defaultHandler(params)\n          },\n          columnClickHandler(...params){\n              //console.log(\"columnClickHandler\",params)\n              this.moduleConfig.columnClickHandler?this.moduleConfig.columnClickHandler(...params,this):this.defaultHandler(...params)\n          },\n          hoverHandler(...params){\n              //console.log(\"hoverHandler\",params)\n              this.moduleConfig.hoverHandler?this.moduleConfig.hoverHandler(params):this.defaultHandler(params)\n          },\n          defaultHandler(...params){\n              //console.log(\"defaultHandler\",params)\n              this.moduleConfig.defaultHandler?this.moduleConfig.defaultHandler(params):''\n          },\n          initColumn(){\n              let that=this;\n              let columnWidthAuto=0;\n              this.tableListConfig.columns.map((column,index)=>{\n                  if(column.width==\"auto\"){\n                      ++columnWidthAuto;\n                  }\n\n                  if(index==(that.tableListConfig.columns.length-1)&&columnWidthAuto==0){\n                      column.width=\"auto\";\n                  }\n                  if(column.addEventListener){\n                      column.addEventListener.map(eventName=>{\n                          let eventHandlerName=eventName;\n                          //console.log(column.prop,\"eventName\",eventName)\n                          if(eventName==\"click\"){\n                              eventHandlerName=\"columnClick\";\n                          }\n                          column[eventName]=that[eventHandlerName+\"Handler\"]||that.defaultHandler;\n                      })\n                  }\n                  let elementInfo=column;\n                  if(that.$route.params.moduleName!=\"createTableList\"&&elementInfo.columnHandlerText){\n                      elementInfo.columnHandler=(data)=>{\n                          //console.log(\"*********>\",Array.isArray(data),data)\n                          let compiledText=\"\";\n                          if(Array.isArray(data)){\n                              compiledText=data.map(objectItem=>{\n                                  let textTemplate=JSON.parse(JSON.stringify(elementInfo.columnHandlerText));\n                                  textTemplate=textTemplate.map((item,index)=>{\n                                      let tarText=/(#+([a-zA-Z]+)#+)/g.exec(item)[0];\n                                      let propertyText=/(#+([a-zA-Z]+)#+)/g.exec(item)[2];\n                                      item=item.replace(tarText,objectItem[propertyText]||'');\n                                      return item;\n                                  })\n                                  return textTemplate.join(\"\");\n                              })\n                          }else{\n                              let text=elementInfo.columnHandlerText;\n                              if(!Array.isArray(text)){\n                                  text=[text];\n                              }\n                              compiledText=text.map((item,index)=>{\n                                  if(/(#+([a-zA-Z]+)#+)/g.test(item)){\n                                      let tarText=/(#+([a-zA-Z]+)#+)/g.exec(item)[0];\n                                      let propertyText=/(#+([a-zA-Z]+)#+)/g.exec(item)[2];\n                                      item=item.replace(tarText,data[propertyText]||'');\n                                  }\n                                  return item;\n                              })\n                          }\n                          return compiledText.join(\"\");\n                      }\n                  }\n              })\n          },\n          initPage(){\n              let that = this;\n\n              let moduleConfig=moduleConfigData.getConfig()[this.$route.params.moduleName];\n              that.moduleConfig=moduleConfig;\n\n              console.log(\"moduleConfig>>>>>>\",moduleConfig,this.$route.params)\n\n              if(!moduleConfig){\n                  alert(\"配置模块\"+this.$route.params.moduleName+\"未找到,请检查配置\");\n                  return;\n              }\n              let queryElements=moduleConfig.queryElements;\n              tableListConfig.url=moduleConfig.url;\n              //tableListConfig.query=Object.assign(,moduleConfig.query);//moduleConfig.query||\n              let queryParam=moduleConfig.query||{\n                  pageNum: 1,\n                  pageSize: 15,\n              };\n              Object.keys(moduleConfig.query||{}).forEach(key=>{\n                  queryParam[key]=this.$route.params[moduleConfig.query[key]]||''\n              })\n\n              if(moduleConfig.readonly){\n                  that.readonly=moduleConfig.query;\n              }\n\n              tableListConfig.query=queryParam;\n              //console.log(\"----====>>>>\",tableListConfig.query,queryParam)\n              tableListConfig.columns=moduleConfig.columns;\n\n              queryElements.map(item=>{\n                  if(queryParam[item.prop]!=undefined&&queryParam[item.prop]!=\"\"){\n                      item.defaultValue=queryParam[item.prop];\n                      item.value=queryParam[item.prop];\n                  }\n              })\n\n              that.queryConfig.queryElements=queryElements;\n              that.queryConfig.containerStyle=moduleConfig.containerStyle;\n              moduleConfig.operator.columns.map(item=>{\n                  if(!item.click){\n                      if(item.confirmDel){\n                          item.click=that.deleteRowHandler;\n                      }else{\n                          item.click=that.clickHandler;\n                      }\n                  }\n                  if(item.viewHandler==true){\n                      item.viewHandler=(btnInfo,rowData,queryParam,otherData)=>{\n                          return btnInfo.map[rowData[btnInfo.prop]]\n                      }\n                  }\n                  item.style=Object.assign(JSON.parse(JSON.stringify(baseBtnStyle)),item.style);\n                  return item;\n              });\n\n              tableListConfig.operator=moduleConfig.operator;\n              tableListConfig.selection=moduleConfig.selection;\n              tableListConfig.splitTables=moduleConfig.splitTables||that.tableListConfig.splitTables;\n              tableListConfig.pagerDataHelper=moduleConfig.pagerDataHelper||that.pagerDataHelper;\n              tableListConfig.errorDataHelper=moduleConfig.errorDataHelper||that.errorDataHelper;\n              tableListConfig.chooseAllClick=that.chooseAllClick;\n              tableListConfig.clickConfig=that.clickConfig;\n\n              that.tableListConfig=tableListConfig;\n\n              this.initColumn();\n\n\n              this.$refs.tableList&&this.$refs.tableList.fresh('commonModule');\n          },\n          initWatch(){\n              let that=this;\n              this.$watch(\"moduleConfig.menuConfig\",function (newData,oldData) {\n                  this.moduleConfig.menuConfig=newData;\n                  console.log(\"*******>menuConfig>>>>>>>>\",newData)\n              },{\n                  deep:true\n              })\n\n              this.$watch(\"tableListConfig.columns\",function (newData,oldData) {\n                 // this.initColumn(newData,oldData);\n              },{\n                  deep:true\n              })\n              this.$watch(\"moduleConfig.queryElements\",function (newData,oldData) {\n                  this.queryConfig.queryElements=newData;\n              },{\n                  deep:true\n              })\n\n              this.$watch(\"moduleConfig.operator.columns\",function (newData,oldData) {\n                  that.moduleConfig.operator.columns.map(item=>{\n                      //console.log(item)\n                      if(!item.click){\n                          if(item.confirmDel){\n                              item.click=that.deleteRowHandler;\n                          }else{\n                              item.click=that.clickHandler;\n                          }\n                      }\n                      if(item.viewHandler==true){\n                          item.viewHandler=(btnInfo,rowData,queryParam,otherData)=>{\n                              return btnInfo.map[rowData[btnInfo.prop]]\n                          }\n                      }\n                      item.style=Object.assign(JSON.parse(JSON.stringify(baseBtnStyle)),item.style);\n                      return item;\n                  });\n              },{\n                  deep:false\n              })\n\n              this.$watch(\"moduleConfig.url\",function (newData,oldData) {\n                  that.tableListConfig.url=newData;\n              })\n          },\n          chooseAllClick(...params){\n              //console.log(\"chooseAllClick\",...params);\n              this.chooseIds=params[0];\n          },\n          getObjectValue(target ,prop,otherParam){//获取属性值 属性不争取返回空 可以获取类似 student.school.address.no 深层次获取\n              let props=prop.split(\".\");\n              let i=0;\n              let tempValue=target;\n              while (props.length-i>=1){\n                  if(!tempValue){\n                      console.log(\"****为空***=---->\",props[i])\n                      break;\n                  }\n                  tempValue=tempValue[props[i]];\n                  tempValue=tempValue==undefined?otherParam[props[i]]:tempValue;\n                  i++;\n              }\n              return tempValue;\n          },\n          replaceTemplate(target,templateText,otherParam) {\n              let result=null;\n              let patt = new RegExp(\"#{2}(\\s+)?[\\.a-zA-Z\\d]+(\\s+)?#{2}\",\"g\");\n\n              console.log(\"target,templateText,otherParam\",target,templateText,otherParam)\n              let replaceText=[];\n              while ((result=patt.exec(templateText))!=null){\n                  let props=result[0];\n                  let getResult=this.getObjectValue(target,props.replace(/#+/g,\"\"),otherParam);\n                  if(getResult===''){\n                      getResult=null;\n                  }\n                  replaceText.push({\n                      template:result[0],\n                      value:getResult\n                  })\n              }\n\n              replaceText.forEach(replaceItem=>{\n                  templateText=templateText.replace(replaceItem.template,replaceItem.value)\n              })\n\n              return templateText;\n          },\n          downLoad(){\n              let file=new File(['let config='+JSON.stringify(this.config,null,4)],{\n                  type: 'text',\n                  encoding: 'UTF-8'\n              });\n\n              var a = document.createElement('a');\n              a.href = URL.createObjectURL(file);\n              a.download ='列表配置.js';\n              a.click();\n\n          },\n          getService(){\n              return backendService;\n          },\n          editorFormHandler(...params){\n              //console.log(\"defaultHandler\",params)\n              this.moduleConfig.editorFormHandler?this.moduleConfig.editorFormHandler(this,...params):''\n          },\n      },\n      created(){\n          this.initPage();\n          this.initWatch();\n\n      },\n      mounted(){\n          /*var editor = ace.edit(\"ace\");\n          editor.setTheme(\"ace/theme/twilight\");\n          editor.session.setMode(\"ace/mode/javascript\");\n          editor.setOptions({\n              enableBasicAutocompletion: true,\n              enableSnippets: true,\n              enableLiveAutocompletion: false\n          });\n          editor.setValue(`\n            ${JSON.stringify(this.moduleConfig,null,4)}\n          `)*/\n      },\n      watch:{\n          '$route'(to,from){\n              //console.log(\"this.$route.params\",this.$route.params)\n              this.initPage();\n          }\n      },\n      computed:{\n          config:function () {\n              let copyData=JSON.parse(JSON.stringify(this.tableListConfig));\n              return Object.assign(copyData,this.queryConfig)\n          },\n          choosedIdMap:function () {\n              let dataMap={};\n              this.chooseIds.forEach(item=>{\n                  dataMap[item.id]=item.id;\n              })\n              return dataMap;\n          }\n      }\n  }\n</script>\n\n<style>\n  .formMessage{\n    width: 600px;\n  }\n</style>\n"]}]}