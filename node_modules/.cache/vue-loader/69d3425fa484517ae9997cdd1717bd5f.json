{"remainingRequest":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/src/components/tableList/listTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/src/components/tableList/listTable.vue","mtime":1553590176198},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport tableListComponent from './tableListComponent'\nimport tableQueryParamComponent from './tableQueryParamComponent'\nimport Vue from 'vue'\n\nVue.component('async-element', function (resolve, reject) {\n        resolve({\n            template: `<div style=''>\n                          <div style=\"padding: 5px 10px;color: #0056aa;font-weight: bolder;font-size: 14px;\">\n                               {{$attrs.config.rowData.name}}\n                          </div>\n                          <div style=\"padding-left: 40px;padding-top: 10px;padding-bottom: 10px;\">\n                              <label style=\"padding: 3px 10px;margin-right: 10px;margin-bottom: 10px;cursor: pointer;\"  :key=\"item.id+'_'+index\" v-for=\"(item,index) in $attrs.config.rowData.tagList\">\n                                <input v-model=\"item.checked\" :id=\"'tag'+item.id\" type=\"checkbox\" @click=\"$attrs.config.column.click(item,$attrs.config.rowData,$event)\"><span style=\"padding-left: 5px;\">{{item.name}}</span>\n                              </label>\n                          </div>\n\n                      </div>`\n        })\n})\n\n\nexport default {\n    name: 'list-table',\n    components:{\n        'my-table':tableListComponent,\n        'query-param':tableQueryParamComponent\n    },\n    data(){\n        return{\n            readonly:{},\n            tableListConfig:{watchProp:'',columns:[],operator:{width:200,columns:[]},url:'',splitTables:1,showHeader:true,stripe:true,pager:{pageSize:15}},\n            queryConfig:{queryElements:[],containerStyle:{}},\n        }\n    },\n    methods:{\n        clickHandler(param,...params){\n            //console.log(\"clickHandler\",param)\n            let config=that.$attrs.config;\n            if(config.clickHandler&& typeof config.clickHandler == \"function\"){\n                config.clickHandler(param,...params)\n            }\n        },\n        pagerDataHelper(param,...params){\n            //console.log(\"pagerDataHelper********\",param);\n            let config=that.$attrs.config;\n            if(config.pagerDataHelper&& typeof config.pagerDataHelper == \"function\"){\n                return config.pagerDataHelper(param,...params);\n            }\n            param.content.map(item=>{\n                //console.log(\"idCheck==>\",item.idCheck)\n                return item;\n            })\n            return param;\n        },\n        clickConfig(param,btn,...params){\n            let that=this;\n            let config=this.$attrs.config;\n            if(config.clickHandler&& typeof config.clickHandler == \"function\"){\n                config.clickHandler(param,btn,...params);\n            }\n            if(btn.type==\"search\"||btn.type==\"tab\"){\n                that.$nextTick(function () {\n                    if(config.tableListConfig.beforeQuery&& typeof config.tableListConfig.beforeQuery == \"function\"){\n                        //console.log(\"******search*****9999900000\",param)\n                        let result=config.tableListConfig.beforeQuery(param,btn,...params);\n                        if(result instanceof Promise){\n                            result.then(success=>{\n                                this.$nextTick(function () {\n                                    this.$refs.tableList.queryListByPager(1);\n                                })\n\n                            },error=>{\n                                that.$message({\n                                    message:error.msg,\n                                    type:\"error\"\n                                })\n                            })\n                        }else{\n                            if(result){\n                                if(result.code==1){\n                                    this.$nextTick(function () {\n                                        this.$refs.tableList.queryListByPager(1);\n                                    })\n                                }else{\n                                    console.log(\"result\",result)\n                                    that.$message({\n                                        message:result.msg||'检查不通过但是没有返回错误信息',\n                                        type:\"error\"\n                                    })\n                                }\n                            }else{\n                                /*检查没有阻止 继续请求*/\n                                this.$nextTick(function () {\n                                    this.$refs.tableList.queryListByPager(1);\n                                })\n                            }\n                        }\n                    }else{\n                        this.$refs.tableList.queryListByPager(1);\n                    }\n                })\n            }\n        },\n        fresh(){\n            this.$nextTick(function () {\n                this.$refs.tableList.queryListByPager(1);\n            })\n        }\n    },\n    created(){\n        let that = this;\n        let config=that.$attrs.config;\n        that.readonly=this.$attrs.readData||{};\n        that.tableListConfig=Object.assign(that.tableListConfig,config.tableListConfig);\n\n        that.queryConfig=Object.assign(that.queryConfig,config.queryConfig);\n        that.$on(\"readonlyDataChanged\",function (newValue) {\n            that.readonly=newValue;\n        })\n        this.$watch(\"$attrs.config\",function (newData,oldData) {\n            that.tableListConfig=Object.assign(that.tableListConfig,newData.tableListConfig);\n            that.readonly=Object.assign(that.readonly,that.$attrs.config.readonly);\n            that.queryConfig.queryElements=newData.queryConfig.queryElements;\n            that.queryConfig.containerStyle=newData.queryConfig.containerStyle;\n        },{\n            deep:true\n        })\n    },\n    computed:{\n        queryParam:function(){\n            return this.$refs.queryParam.queryParam;\n        }\n    }\n}\n",{"version":3,"sources":["listTable.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"listTable.vue","sourceRoot":"src/components/tableList","sourcesContent":["<template>\n  <div class=\"list2\">\n    <slot name=\"beforeQuery\"></slot>\n    <query-param :queryConfig=\"queryConfig\" :readData=\"readonly\" :clickConfig=\"clickConfig\" ref=\"queryParam\"></query-param>\n    <slot name=\"beforeTable\"></slot>\n    <my-table :tableListConfig=\"tableListConfig\" :readData=\"readonly\" ref=\"tableList\"></my-table>\n    <slot name=\"afterTable\"></slot>\n  </div>\n</template>\n<script>\n  import tableListComponent from './tableListComponent'\n  import tableQueryParamComponent from './tableQueryParamComponent'\n  import Vue from 'vue'\n\n  Vue.component('async-element', function (resolve, reject) {\n          resolve({\n              template: `<div style=''>\n                            <div style=\"padding: 5px 10px;color: #0056aa;font-weight: bolder;font-size: 14px;\">\n                                 {{$attrs.config.rowData.name}}\n                            </div>\n                            <div style=\"padding-left: 40px;padding-top: 10px;padding-bottom: 10px;\">\n                                <label style=\"padding: 3px 10px;margin-right: 10px;margin-bottom: 10px;cursor: pointer;\"  :key=\"item.id+'_'+index\" v-for=\"(item,index) in $attrs.config.rowData.tagList\">\n                                  <input v-model=\"item.checked\" :id=\"'tag'+item.id\" type=\"checkbox\" @click=\"$attrs.config.column.click(item,$attrs.config.rowData,$event)\"><span style=\"padding-left: 5px;\">{{item.name}}</span>\n                                </label>\n                            </div>\n\n                        </div>`\n          })\n  })\n\n\n  export default {\n      name: 'list-table',\n      components:{\n          'my-table':tableListComponent,\n          'query-param':tableQueryParamComponent\n      },\n      data(){\n          return{\n              readonly:{},\n              tableListConfig:{watchProp:'',columns:[],operator:{width:200,columns:[]},url:'',splitTables:1,showHeader:true,stripe:true,pager:{pageSize:15}},\n              queryConfig:{queryElements:[],containerStyle:{}},\n          }\n      },\n      methods:{\n          clickHandler(param,...params){\n              //console.log(\"clickHandler\",param)\n              let config=that.$attrs.config;\n              if(config.clickHandler&& typeof config.clickHandler == \"function\"){\n                  config.clickHandler(param,...params)\n              }\n          },\n          pagerDataHelper(param,...params){\n              //console.log(\"pagerDataHelper********\",param);\n              let config=that.$attrs.config;\n              if(config.pagerDataHelper&& typeof config.pagerDataHelper == \"function\"){\n                  return config.pagerDataHelper(param,...params);\n              }\n              param.content.map(item=>{\n                  //console.log(\"idCheck==>\",item.idCheck)\n                  return item;\n              })\n              return param;\n          },\n          clickConfig(param,btn,...params){\n              let that=this;\n              let config=this.$attrs.config;\n              if(config.clickHandler&& typeof config.clickHandler == \"function\"){\n                  config.clickHandler(param,btn,...params);\n              }\n              if(btn.type==\"search\"||btn.type==\"tab\"){\n                  that.$nextTick(function () {\n                      if(config.tableListConfig.beforeQuery&& typeof config.tableListConfig.beforeQuery == \"function\"){\n                          //console.log(\"******search*****9999900000\",param)\n                          let result=config.tableListConfig.beforeQuery(param,btn,...params);\n                          if(result instanceof Promise){\n                              result.then(success=>{\n                                  this.$nextTick(function () {\n                                      this.$refs.tableList.queryListByPager(1);\n                                  })\n\n                              },error=>{\n                                  that.$message({\n                                      message:error.msg,\n                                      type:\"error\"\n                                  })\n                              })\n                          }else{\n                              if(result){\n                                  if(result.code==1){\n                                      this.$nextTick(function () {\n                                          this.$refs.tableList.queryListByPager(1);\n                                      })\n                                  }else{\n                                      console.log(\"result\",result)\n                                      that.$message({\n                                          message:result.msg||'检查不通过但是没有返回错误信息',\n                                          type:\"error\"\n                                      })\n                                  }\n                              }else{\n                                  /*检查没有阻止 继续请求*/\n                                  this.$nextTick(function () {\n                                      this.$refs.tableList.queryListByPager(1);\n                                  })\n                              }\n                          }\n                      }else{\n                          this.$refs.tableList.queryListByPager(1);\n                      }\n                  })\n              }\n          },\n          fresh(){\n              this.$nextTick(function () {\n                  this.$refs.tableList.queryListByPager(1);\n              })\n          }\n      },\n      created(){\n          let that = this;\n          let config=that.$attrs.config;\n          that.readonly=this.$attrs.readData||{};\n          that.tableListConfig=Object.assign(that.tableListConfig,config.tableListConfig);\n\n          that.queryConfig=Object.assign(that.queryConfig,config.queryConfig);\n          that.$on(\"readonlyDataChanged\",function (newValue) {\n              that.readonly=newValue;\n          })\n          this.$watch(\"$attrs.config\",function (newData,oldData) {\n              that.tableListConfig=Object.assign(that.tableListConfig,newData.tableListConfig);\n              that.readonly=Object.assign(that.readonly,that.$attrs.config.readonly);\n              that.queryConfig.queryElements=newData.queryConfig.queryElements;\n              that.queryConfig.containerStyle=newData.queryConfig.containerStyle;\n          },{\n              deep:true\n          })\n      },\n      computed:{\n          queryParam:function(){\n              return this.$refs.queryParam.queryParam;\n          }\n      }\n  }\n</script>\n\n<style>\n  .myBtn{\n    background: #333 !important;\n    text-align: center;\n    color: #fff!important;\n    cursor: pointer;\n  }\n</style>\n"]}]}