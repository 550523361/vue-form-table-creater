{"remainingRequest":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/src/components/tableList/tableListComponent.vue?vue&type=style&index=0&id=55514778&scoped=true&lang=css&","dependencies":[{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/src/components/tableList/tableListComponent.vue","mtime":1553657121770},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.operateBtnContainer {\n  display: flex;\n  width: 100%;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n}\n.operateBtnContainer > label {\n}\n.checkedClass {\n  background: #ff00ff !important;\n  color: #000 !important;\n}\n.el-table .warning-row {\n  background: oldlace !important;\n}\n\n.el-table .success-row {\n  background: #f0f9eb;\n}\n.defaultHeader th,\n.defaultHeader tr {\n  background: #eef1f6;\n}\n.noPadding {\n  padding: 0px !important;\n}\n",{"version":3,"sources":["tableListComponent.vue"],"names":[],"mappingssiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tableListComponent.vue","sourceRoot":"src/components/tableList","sourcesContent":["<template>\n  <div>\n    <el-row>\n      <el-col\n        v-for=\"(item,index) in tableListConfig.splitTables\"\n        :span=\"24/tableListConfig.splitTables\"\n        :style=\"{\n                     paddingRight: tableListConfig.splitTables>1?(index==(tableListConfig.splitTables-1)?'0px':'5px'):'0px'\n                     }\"\n        :key=\"'_table_seq_'+index+'_'+tableListConfig.url\"\n      >\n        <el-table\n          :data=\"getContextIndex(index)\"\n          v-if=\"tableListConfig.splitTables==1||tableListConfig.splitTables>1&&getContextIndex(index).length\"\n          border\n          tooltip-effect=\"dark\"\n          :stripe=\"(tableListConfig.stripe==undefined?true:tableListConfig.stripe)\"\n          :show-header=\"tableListConfig.showHeader==undefined?true:tableListConfig.showHeader\"\n          @selection-change=\"chooseAllClick\"\n          @header-click=\"headerClick\"\n          :row-class-name=\"tableRowClassName\"\n          :header-row-class-name=\"headerRowClassName\"\n          :ref=\"'tableList_'+index\"\n          style=\"width: 100%\"\n        >\n          <el-table-column\n            type=\"selection\"\n            v-if=\"tableListConfig.selection\"\n            :selectable=\"filterMethod\"\n          ></el-table-column>\n          <el-table-column\n            v-for=\"(column,columnIndex) in tableListConfig.columns\"\n            :key=\"column.prop+'_'+columnIndex+'_'+index\"\n            :width=\"column.width?(column.width=='auto'?'':column.width):80\"\n            :prop=\"column.prop\"\n            v-if=\"column.viewHandler?column.viewHandler(column,$parent.queryParam,$parent.readonly,context):true\"\n            :label=\"column.label\"\n          >\n            <template slot-scope=\"scope\">\n              <span\n                v-if=\"column.type==null||column.type==''\"\n                @click=\"column['click']&&column['click'](scope.row,column,$event,context)\"\n              >\n                <span\n                  v-if=\"column.html\"\n                  v-html=\"column['columnHandler']&&typeof column.columnHandler=='function'?column.columnHandler(scope.row[column.prop],scope.row,column,context):column.columnHandler\"\n                ></span>\n                <span\n                  v-else\n                >{{column[\"columnHandler\"]&&typeof column.columnHandler==\"function\"?column.columnHandler(scope.row[column.prop],scope.row,context):scope.row[column.prop]}}</span>\n              </span>\n              <input\n                v-if=\"column.type=='input'\"\n                @keyup.enter=\"column['enter']&&column['enter']($event,scope.row,column)\"\n                @blur=\"column['blur']&&column['blur']($event,scope.row,column)\"\n                style=\"line-height: 30px;width: 100%;\"\n                v-model=\"scope.row[column.prop]\"\n                @change=\"column['change']&&column['change']($event,scope.row,column)\"\n              >\n              <input\n                v-if=\"column.type=='checkbox'\"\n                @click=\"column['click']&&column['click']($event,scope.row)\"\n                @change=\"column['change']&&column['change']($event,scope.row)\"\n                v-model=\"scope.row.checked\"\n                type=\"checkbox\"\n              >\n              <a\n                v-if=\"column.type=='href'\"\n                :href=\"scope.row[column.prop]\"\n                target=\"_blank\"\n                style=\"cursor: pointer;color: blue;\"\n                title=\"点击看看\"\n              >{{scope.row[column.prop]}}</a>\n              <input\n                v-if=\"column.type=='sortOrder'\"\n                type=\"number\"\n                v-model=\"scope.row[column.prop]\"\n                @change=\"column['change']&&column['change']($event,scope.row)\"\n                style=\"max-width: 40px;\"\n                alt\n              >\n              <label\n                v-if=\"column.type=='diy'\"\n                @click=\"column['click']&&column['click']($event,scope.row)\"\n              >{{column.diy&&column.diy(scope.row)}}</label>\n              <span v-if=\"(column.type=='image'||column.type=='img')&&scope.row[column.prop]\">\n                <img\n                  v-for=\"img in (scope.row[column.prop]+''||'').split(',')\"\n                  @click=\"column['click']&&column['click']($event,scope.row,img,scope.row[column.prop])\"\n                  :src=\"img\"\n                  :key=\"'img_'+img\"\n                  v-if=\"img\"\n                  style=\"max-width: 80px;vertical-align: middle;margin: 5px;\"\n                  alt\n                >\n              </span>\n              <span v-if=\"column.type=='element'\">\n                <async-element\n                  :config=\"{columnConfig:column.elementConfig,propValue:scope.row[column.prop],rowData:scope.row,column}||{aa:12}\"\n                >\n                  <slot name=\"listInfo\"></slot>\n                </async-element>\n              </span>\n            </template>\n          </el-table-column>\n          <el-table-column\n            fixed=\"right\"\n            :width=\"tableListConfig.operator.width?(tableListConfig.operator.width=='auto'?'':tableListConfig.operator.width):80\"\n            v-if=\"tableListConfig.operator.columns&&tableListConfig.operator.columns.length>0\"\n            :label=\"tableListConfig.operator.label||'操作'\"\n            :key=\"tableListConfig.url\"\n          >\n            <template slot-scope=\"scope\">\n              <div class=\"operateBtnContainer\">\n                <label\n                  :for=\"'checkbox_'+scope.row.id+operate.prop\"\n                  :style=\"scope.row[operate.prop+'Check']?operate.checkedStyle:(operate.styleHandler&&operate.styleHandler(scope.row[operate.prop],scope.row)||operate.style)\"\n                  v-if=\"\n                                       operate.viewHandler&&operate.viewHandler(operate,scope.row,$parent.queryParam,$parent.readonly,context)||\n                                       operate.viewHandler==null\n                                   \"\n                  v-for=\"(operate,operatIndex) in tableListConfig.operator.columns\"\n                  :key=\"operate.prop+'_'+operate.label+operatIndex+'_'+'_labelKey_'+(scope.row.id||scope.row.code)\"\n                  :class=\"[{'operateBtn':true}]\"\n                  @click=\"operate.type!='checkbox'?operateClick(scope.row,operate):''\"\n                >\n                  <input\n                    type=\"checkbox\"\n                    v-if=\"operate.type=='checkbox'\"\n                    style=\"display: none;\"\n                    :id=\"'checkbox_'+scope.row.id+operate.prop\"\n                    v-model=\"scope.row['idCheck']\"\n                    @change=\"operate.type=='checkbox'?operateClick(scope.row,operate):''\"\n                  >\n                  <span\n                    v-if=\"!operate.viewHandler\"\n                  >{{(!scope.row[operate.prop+'Check'])?operate.label:(operate.cancleLabel||'取消')}}{{operate.map&&operate.map[scope.row[operate.prop]]}}</span>\n                  <span\n                    v-if=\"operate.viewHandler\"\n                  >{{operate.viewHandler(operate,scope.row,$parent.queryParam,$parent.readonly,context)}}</span>\n                </label>\n              </div>\n            </template>\n          </el-table-column>\n        </el-table>\n      </el-col>\n    </el-row>\n    <div class=\"block\">\n      <el-pagination\n        v-if=\"tableDataSource.total\"\n        layout=\"prev, pager, next\"\n        :total=\"tableDataSource.total\"\n        :page-size=\"tableDataSource.size\"\n        :current-page=\"tableDataSource.number\"\n        @current-change=\"queryListByPager\"\n      ></el-pagination>\n    </div>\n  </div>\n</template>\n\n<script>\nimport backendService from \"../remoteService/backendService\";\n\nexport default {\n  name: \"table-list\",\n  props: {},\n  data: function() {\n    return {\n      queryParam: { pageNum: 1, pageSize: 20 },\n      tableListConfig: {\n        columns: [],\n        watchProp: \"\",\n        operator: { width: 200, columns: [] },\n        url: \"\",\n        splitTables: 1,\n        stripe: true,\n        showHeader: true\n      },\n      hasCheckBox: [],\n      tableDataSource: {\n        dataList: []\n      },\n      readonly: {},\n      context: null,\n      backendService: backendService\n    };\n  },\n  methods: {\n    batchChoose: function($event, param) {\n      for (key in this.tableData.data.dataList) {\n        this.tableData.data.dataList[key].checked = $event.target.checked;\n      }\n    },\n    queryListByPager(pageNum) {\n      let that = this;\n      let arrtsConfig = this.$attrs;\n\n      let baseParam = {\n        pageNum: that.queryParam.pageNum,\n        pageSize: that.queryParam.pageSize\n      };\n\n      baseParam = Object.assign(baseParam, that.tableListConfig.query);\n\n      let submitParam = JSON.parse(JSON.stringify(that.$parent.queryParam));\n      submitParam.pageSize =\n        arrtsConfig.tableListConfig.pager.pageSize || that.queryParam.pageSize;\n\n      if (submitParam.timeRange) {\n        submitParam[\"startTime\"] =\n          that.$parent.queryParam.timeRange[0] == \"\"\n            ? \"\"\n            : that.$parent.queryParam.timeRange[0];\n        submitParam[\"endTime\"] =\n          that.$parent.queryParam.timeRange[1] == \"\"\n            ? \"\"\n            : that.$parent.queryParam.timeRange[1];\n        delete submitParam[\"timeRange\"];\n      }\n\n      if (that.$parent.queryParam.deleteProps) {\n        //console.log(that.queryParam.deleteProps)\n        that.$parent.queryParam.deleteProps.forEach(item => {\n          delete submitParam[item];\n        });\n        delete submitParam[\"deleteProps\"];\n      }\n      submitParam.pageNum = pageNum;\n\n      baseParam = Object.assign(baseParam, submitParam);\n      backendService\n        .getData({\n          url: arrtsConfig.tableListConfig.url,\n          method: arrtsConfig.tableListConfig.method || \"post\",\n          data: baseParam\n        })\n        .then(function(result) {\n          if (!result) {\n            if (\n              typeof arrtsConfig.tableListConfig.errorDataHelper == \"function\"\n            ) {\n              let dealResult = arrtsConfig.tableListConfig.errorDataHelper(\n                result\n              );\n              if (dealResult instanceof Promise) {\n                dealResult.then(\n                  success => {\n                    that.afterRequest(success.data);\n                    that.tableDataSource = success.data;\n                  },\n                  error => {\n                    console.log(\"失败!!!!!!!\", error);\n                  }\n                );\n              } else {\n                that.afterRequest(dealResult);\n                console.log(\"dealResult\", dealResult);\n                that.tableDataSource = dealResult;\n              }\n            } else {\n              that.tableDataSource = [];\n              that.$message({\n                message: \"服务器错误!\",\n                type: \"error\"\n              });\n            }\n            return;\n          }\n          if (result.code == \"1\") {\n            if (\n              typeof arrtsConfig.tableListConfig.pagerDataHelper == \"function\"\n            ) {\n              let dealResult = arrtsConfig.tableListConfig.pagerDataHelper(\n                result.data\n              );\n              if (dealResult instanceof Promise) {\n                dealResult.then(\n                  success => {\n                    that.afterRequest(success.data);\n                    that.tableDataSource = success.data;\n                    that.$refs.tableList_0 &&\n                      that.toggleRowSelection(that.$refs.tableList_0[0]);\n                  },\n                  error => {\n                    console.log(\"失败!!!!!!!\", error);\n                  }\n                );\n              } else {\n                that.afterRequest(dealResult);\n                that.tableDataSource = dealResult;\n                that.$refs.tableList_0 &&\n                  that.toggleRowSelection(that.$refs.tableList_0[0]);\n              }\n            } else {\n              that.afterRequest(result.data);\n              that.tableDataSource = result.data;\n              that.$refs.tableList_0 &&\n                that.toggleRowSelection(that.$refs.tableList_0[0]);\n            }\n          } else {\n            if (\n              typeof arrtsConfig.tableListConfig.errorDataHelper == \"function\"\n            ) {\n              let dealResult = arrtsConfig.tableListConfig.errorDataHelper(\n                result.data\n              );\n              if (dealResult instanceof Promise) {\n                dealResult.then(\n                  success => {\n                    that.afterRequest(success.data);\n                    that.tableDataSource = success.data;\n                  },\n                  error => {\n                    console.log(\"失败!!!!!!!\", error);\n                  }\n                );\n              } else {\n                that.afterRequest(dealResult);\n                that.tableDataSource = dealResult;\n              }\n            } else {\n              that.tableDataSource = [];\n            }\n          }\n        });\n    },\n    toggleRowSelection(tableList) {\n      if (!tableList) return;\n      let timerId = setTimeout(data => {\n        if (tableList.data) {\n          let choosedRowIndexArray = [];\n          //console.log(\"tableList.data\",tableList.data)\n          tableList.data.forEach((item, index) => {\n            if (item.selectionChoosed) {\n              choosedRowIndexArray.push(index);\n            }\n          });\n\n          if (!choosedRowIndexArray.length) return;\n\n          choosedRowIndexArray.forEach(rowDataIndex => {\n            tableList.toggleRowSelection(tableList.data[rowDataIndex]);\n          });\n        }\n        clearTimeout(timerId);\n      }, 200);\n    },\n    afterRequest(data) {\n      if (!data || !data.content) return;\n      if (!data.content instanceof Array) {\n        return;\n      }\n      let that = this;\n      if (that.hasCheckBox.length) {\n        data.content.map(item => {\n          that.hasCheckBox.forEach(checkBoxOperatorItem => {\n            item[checkBoxOperatorItem.prop + \"Check\"] = item[\n              checkBoxOperatorItem.prop + \"Check\"\n            ]\n              ? item[checkBoxOperatorItem.prop + \"Check\"]\n              : false;\n          });\n          return item;\n        });\n      }\n      return data;\n    },\n    chooseAllClick: function(data, operate) {\n      //console.log(data,operate);\n      if (\n        this.tableListConfig.chooseAllClick &&\n        typeof this.tableListConfig.chooseAllClick === \"function\"\n      ) {\n        this.tableListConfig.chooseAllClick(\n          data,\n          this.$refs.tableList_0[0].data\n        );\n      }\n    },\n    operateClick: function(data, operate) {\n      //console.log(data,operate);\n      let that = this; //content.filter(item=>item[operate.prop+'Check'])\n      this.$nextTick(function() {\n        let result =\n          operate[\"click\"] &&\n          operate[\"click\"](\n            data,\n            operate,\n            this.tableDataSource.content.filter(\n              item => item[operate.prop + \"Check\"]\n            )\n          );\n        if (result) {\n          console.log(\"operateClick\", result);\n          if (result instanceof Promise) {\n            result.then(\n              success => {\n                that.queryListByPager();\n              },\n              error => {}\n            );\n          }\n        }\n      });\n    },\n    headerClick: function(column, param) {\n      console.log(\"headerClick\", column, param);\n      //column.label=column.label=='取消'?'全选':'取消';\n      column.checkedStyle = {\n        width: \"100%\",\n        display: \"inline-block\",\n        height: \"100%\",\n        textAlign: \"center\",\n        backgroundColor:\n          \"rgba(\" +\n          Math.ceil(Math.random() * 255) +\n          \",\" +\n          Math.ceil(Math.random() * 255) +\n          \",\" +\n          Math.ceil(Math.random() * 255) +\n          \",1)\",\n        color: \"#fff\"\n      };\n      if (\n        this.tableListConfig.headerClick &&\n        typeof this.tableListConfig.headerClick == \"function\"\n      ) {\n        this.tableListConfig.headerClick(column, param, this.tableDataSource);\n      }\n    },\n    renderHeader(h, params) {\n      //console.log(\"renderHeaderh  \",h,params)\n      return h(\n        \"span\",\n        {\n          classs: [params.column.checkedStyle || \"\"],\n          style: params.column.checkedStyle || {\n            backgroundColor: \"#f00\",\n            width: \"100%\",\n            display: \"inline-block\",\n            height: \"100%\",\n            textAlign: \"center\",\n            color: \"#fff\"\n          },\n          attrs: {\n            type: \"checkbox\",\n            checked: true\n          }\n        },\n        params.column.label\n      );\n      return h(\n        \"input\",\n        {\n          classs: { A: true, B: true },\n          style: {\n            backgroundColor: \"#f00\",\n            //width:'100%',\n            display: \"inline-block\",\n            // height:'100%',\n            textAlign: \"center\",\n            color: \"#fff\"\n          },\n          attrs: {\n            type: \"checkbox\",\n            checked: true\n          }\n        },\n        params.column.label\n      );\n    },\n    tableRowClassName({ row, rowIndex }) {\n      //console.log(\"row, rowIndex\",row, rowIndex)\n      /*if (rowIndex === 0) {\n                    return 'warning-row';\n                } else if (rowIndex === 3) {\n                    return 'success-row';\n                }*/\n      return \"\";\n    },\n    headerRowClassName({ row, rowIndex }) {\n      return \"defaultHeader\";\n    },\n    filterMethod(value, row, column) {\n      //console.log(value, row, column);\n      return !value.used;\n    },\n    getContextIndex(index) {\n      //console.log(\"index\",index,this.tableListConfig.pager.pageSize)\n      let pageSize = this.tableListConfig.pager.pageSize;\n      let splitPageSize =\n        (pageSize - (pageSize % this.tableListConfig.splitTables)) /\n        this.tableListConfig.splitTables;\n      //console.log(\"splitPageSize\",splitPageSize,index*splitPageSize+(index>0?1:0),(index+1)*splitPageSize,splitPageSize+(index==0?pageSize%this.tableListConfig.splitTables:0))\n      let dataCopy = JSON.parse(\n        JSON.stringify(this.tableDataSource.content || [])\n      );\n      dataCopy = dataCopy\n        .map((item, index) => {\n          if (item) {\n            item[\"_table_row_seq\"] = index + 1;\n            return item;\n          }\n        })\n        .filter(item => item != null);\n      //console.log(\"dataCopy\",dataCopy)\n      let offset = pageSize % this.tableListConfig.splitTables;\n      let tabelData = dataCopy.splice(\n        index * splitPageSize + (index != 0 ? offset : 0),\n        splitPageSize + (index == 0 ? offset : 0)\n      );\n      //console.log(\"tabelData\",tabelData)\n      return tabelData;\n    },\n    cellStyle(...params) {\n      //console.log(params)\n      return {\n        backgroundColor: \"#f00\"\n      };\n    }\n  },\n  created: function() {\n    let that = this;\n    this.context = that;\n    this.tableListConfig = this.$attrs.tableListConfig;\n    let readonly = this.$attrs.readData || {};\n    that.readonly = readonly;\n    if (!this.tableListConfig.url) return;\n    if (\n      this.tableListConfig.operator &&\n      this.tableListConfig.operator.columns\n    ) {\n      this.hasCheckBox = this.tableListConfig.operator.columns.filter(\n        item => item.type == \"checkbox\"\n      );\n    }\n    that.$watch(\n      \"$attrs.tableListConfig\",\n      function(newValue, oldValue) {\n        this.tableListConfig = newValue;\n      },\n      {\n        deep: true\n      }\n    );\n  }\n};\n</script>\n\n<style scoped>\n.operateBtnContainer {\n  display: flex;\n  width: 100%;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n}\n.operateBtnContainer > label {\n}\n.checkedClass {\n  background: #ff00ff !important;\n  color: #000 !important;\n}\n.el-table .warning-row {\n  background: oldlace !important;\n}\n\n.el-table .success-row {\n  background: #f0f9eb;\n}\n.defaultHeader th,\n.defaultHeader tr {\n  background: #eef1f6;\n}\n.noPadding {\n  padding: 0px !important;\n}\n</style>"]}]}