{"remainingRequest":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/src/components/formCreater/baseFormCreater.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/src/components/formCreater/baseFormCreater.vue","mtime":1553588217554},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/iriskang/xkfeng/formAndTableCreater/vue-form-table-creater/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport backendService from '../remoteService/backendService'\nimport validate from './../validate/validate'\nimport addInput from './addInput'\nimport chooseBtn from './chooseBtn'\nimport orderUploadImages from './addImages'\n\nexport default {\n    name: 'base-form-creater',\n    components:{\n        'add-input':addInput,\n        'choose-btn':chooseBtn ,\n        'add-images':orderUploadImages\n    },\n    data(){\n        return{\n            validate:validate,\n            formKey:Math.ceil(Math.random()*10000000),\n            rules:{\n            },\n            ruleForm:{},\n            queryElements:[],\n            dataQuery:{\n                query:{}\n            },\n            form:{},\n            queryButtons:[],\n            readonly:false,\n            editorModule:false,\n            tempQueryElements:{}\n        }\n    },\n    methods:{\n        queryListData(params){\n            return backendService.getData({\n                url:params.url,\n                method:params.method||\"post\",\n                data:params.form\n            }).then(function (result) {\n                return Promise.resolve(result)\n            })\n        },\n        changeQueryParam:function (data,operate) {\n                let casecadeChild=data.casecadeChild;\n                let casecadeGrandsonList=data.casecadeGrandsonList;\n                let cleanMap={};\n                if(casecadeChild){\n                    cleanMap[casecadeChild]=casecadeChild;\n                }\n\n                if(casecadeGrandsonList&&casecadeGrandsonList.length>0){\n                    casecadeGrandsonList.forEach(childItem=>{\n                        cleanMap[childItem]=childItem;\n                    })\n                }\n                let allChildKey=Object.values(cleanMap)\n                let that=this;\n                allChildKey.forEach(cleanKey=>{\n                    //console.log(\"cleanKey\",cleanKey)\n                    that.$set(that.form,cleanKey,'');\n                })\n\n                that.$set(that.tempQueryElements,casecadeChild,[])//清空子元素关联临时值\n\n                that.queryElements.map(itemElement=>{\n                    if(cleanMap[itemElement.prop]){\n                        itemElement.defaultValue=\"\";\n                        itemElement.value=\"\";\n                    }\n                    return itemElement;\n                })\n                this.changeHelp(data,operate);\n        },\n        changeHelp(prop){\n            let that=this;\n            if(prop.type==\"select\"){\n                let currentSwitchValue=this.form[prop.prop];\n                if(prop.switchElements){\n                    let needInitSelected=[].filter.call(prop.switchElements,(item)=>{if(item.whenSwitchValue==currentSwitchValue){ return true;}})[0];\n                    //console.log(\"needInitSelected\",needInitSelected)\n                    if(needInitSelected){\n                        let form=needInitSelected.noNeedAllParams?{}:this.form;\n                        if(needInitSelected.otherParam){\n                            form=Object.assign(form,needInitSelected.otherParam)\n                        }\n                        for(let key in needInitSelected.dropProps){\n                            delete form[needInitSelected.dropProps[key]];\n                        }\n                        let item=needInitSelected;\n                        if(!item.dataUrl) return;\n                        this.queryListData({url:item.dataUrl,form:form,httpMethod:item.httpMethod||\"get\"}).then((listData)=>{\n                            if(!listData) return;\n                            this.$set(this.dataQuery.query,item.propList,item.dataHandler?item.dataHandler(listData):listData[item.propValueList])\n                            this.form[item.prop]=item.defaultValue;\n                            // console.log(\"**** item\",item,this.dataQuery.query)\n                        },(error)=>{\n                            console.log(error);\n                        });\n                    }\n                }else if(prop.casecadeChild){\n                    let form=prop.noNeedAllParams?{}:this.form;\n                    if(prop.casecadeChild.otherParam){\n                        form=Object.assign(form,prop.otherParam)\n                    }\n                    let casecadeChild=this.findCasecadeChild(prop.casecadeChild);\n                    if(casecadeChild.extendsProp){\n                        if(casecadeChild.extendsProp instanceof Array){\n                            for(let seq in casecadeChild.extendsProp){\n                                let key=casecadeChild.extendsProp[seq];\n                                form[key]=currentSwitchValue;\n                            }\n                        }else{\n                            for(let seq in Object.keys(casecadeChild.extendsProp)){\n                                let key=Object.keys(casecadeChild.extendsProp)[seq];\n                                let targetParam=casecadeChild.extendsProp[key];\n                                 console.log(\"key\",key,\"targetParam\",targetParam,this.form[targetParam])\n                                form[key]=this.form[targetParam];\n                            }\n                        }\n\n                    }\n                    let item=casecadeChild;\n                    this.queryListData({url:item.dataUrl,form:form,httpMethod:item.httpMethod||\"get\"}).then((listData)=>{\n                        if(!listData) return;\n                        let resultData=item.dataHandler?item.dataHandler(listData):listData[item.propValueList];\n                        this.$set(this.dataQuery.query,item.propList,resultData)\n                        this.form[item.prop]=item.defaultValue;\n                        let that=this;\n                        if(item.createFormItem){\n                            Object.keys(that.form).filter(key=>key.indexOf(\"temp_\"+item.prop+\"_\")>=0).forEach(deleteKey=>{\n                                //console.log(\"deleteKey\",deleteKey)\n                                delete that.form[deleteKey];\n                            })\n                            Object.keys(that.rules).filter(key=>key.indexOf(\"temp_\"+item.prop+\"_\")>=0).forEach(deleteKey=>{\n                                //console.log(\"deleteRuleKey\",deleteKey)\n                                delete that.rules[deleteKey];\n                            })\n                            resultData.forEach(formItem=>{\n                                formItem.validateProp='temp_'+item.prop+'_'+(formItem.prop||formItem.id);\n                                that.form[formItem.validateProp]=formItem.defaultValue||formItem.default||'';\n                                that.setRules(formItem)\n                            })\n                        }\n                        //console.log(\"**** casecadeChild\",casecadeChild,this.dataQuery.query)\n                    },(error)=>{\n                        console.log(error);\n                    });\n                }else if(prop.extendChild){\n                    console.log(\"prop\",prop)\n                    let form=prop.noNeedAllParams?{}:this.form;\n                    if(prop.casecadeChild.otherParam){\n                        form=Object.assign(form,prop.otherParam)\n                    }\n                    let casecadeChild=prop.extendChild;\n                    if(casecadeChild.dataHandler){\n                        casecadeChild.dataHandler=eval(casecadeChild.dataHandler);\n                    }\n                    if(casecadeChild.extendsProp){\n                        if(casecadeChild.extendsProp instanceof Array){\n                            for(let seq in casecadeChild.extendsProp){\n                                let key=casecadeChild.extendsProp[seq];\n                                form[key]=currentSwitchValue;\n                            }\n                        }else{\n                            for(let seq in Object.keys(casecadeChild.extendsProp)){\n                                let key=Object.keys(casecadeChild.extendsProp)[seq];\n                                let targetParam=casecadeChild.extendsProp[key];\n                                console.log(\"key\",key,\"targetParam\",targetParam,this.form[targetParam])\n                                form[key]=this.form[targetParam];\n                            }\n                        }\n\n                    }\n                    let item=casecadeChild;\n                    this.queryListData({url:item.dataUrl,form:form,httpMethod:item.httpMethod||\"get\"}).then((listData)=>{\n                        if(!listData) return;\n                        let resultData=item.dataHandler?item.dataHandler(listData,prop):listData[item.propValueList];\n                        console.log(\">>>>resultData\",item.prop,resultData)\n                        Object.keys(this.form).filter(key=>key.indexOf(\"temp_\"+item.prop+\"#\")>=0).forEach(deleteKey=>{\n                            //console.log(\"deleteKey\",deleteKey)\n                            delete this.form[deleteKey];\n                        })\n                        Object.keys(this.rules).filter(key=>key.indexOf(\"temp_\"+item.prop+\"#\")>=0).forEach(deleteKey=>{\n                            //console.log(\"deleteRuleKey\",deleteKey)\n                            delete this.rules[deleteKey];\n                        })\n                        resultData.forEach(formItem=>{\n                            this.setRules(formItem)\n                        })\n                        this.$set(this.tempQueryElements,prop.prop,resultData);\n                    },(error)=>{\n                        console.log(error);\n                    });\n                }\n            }else if(prop.type=\"input\"){\n\n            }else{\n                alert(\"no operate\")\n            }\n        },\n        findCasecadeChild(elementKey){\n            let result={};\n            for(let j=0;j<this.queryElements.length;j++){\n                let item=this.queryElements[j];\n                if(item.prop==elementKey){\n                    result=item;\n                    break;\n                }\n\n                if(item.switchElements){\n                    for(let i=0;i<item.switchElements.length;i++){\n                        let innerItem=item.switchElements[i];\n                        if(innerItem.prop == elementKey){\n                            result=innerItem;\n                        }\n                    }\n                }\n            }\n            return result;\n        },\n        initQueryElement(){\n            /*n 级 级联查询开始*/\n            var form=this.form;\n            if(this.queryElements==null||this.queryElements.length==0) return;\n            var requestUrlParam= [].filter.call(this.queryElements, function (item) {\n                if(item.dataUrl&&item.initQuery){\n                    return item;\n                }\n            });\n\n            for(let seq in requestUrlParam){\n                let item=requestUrlParam[seq];//选择初始化 默认初始化 顶级父元素 和 标记为包含includeInit 属性的 下拉元素\n                if(item.casecadeParen==null||item.casecadeParen==\"\"||item.includeInit==true){\n                    /*顶级元素优先查询完成一级数据初始化*/\n\n                    let form=item.noNeedAllParams?{}:this.form;//参数是否使用表单\n                    if(item.otherParam){\n                        form=Object.assign(form,item.otherParam)\n                    }\n                    if(item.extendsProp){\n                        if(item.extendsProp instanceof Array){\n                            for(let seq in item.extendsProp){\n                                let key=item.extendsProp[seq];\n                                form[key]=this.form[key];\n                            }\n                        }else{\n                            for(let seq in Object.keys(item.extendsProp)){\n                                let key=Object.keys(item.extendsProp)[seq];\n                                let targetParam=item.extendsProp[key];\n                                 //console.log(\"key\",key,\"targetParam\",targetParam)\n                                form[key]=this.form[targetParam];\n                            }\n                        }\n                    }\n\n                    this.queryListData({url:item.dataUrl,form:form,httpMethod:item.httpMethod||\"get\"}).then((listData)=>{\n                        if(!listData) return;\n                        this.$set(this.dataQuery.query,item.propList,item.dataHandler?item.dataHandler(listData):listData[item.propValueList])\n                        this.form[item.prop]=item.defaultValue;\n                        //console.log(\"****\",this.dataQuery.query)\n                    },(error)=>{\n                        console.log(error);\n                    });\n                }\n            }\n            /*n 级 级联查询结束*/\n            this.queryButtons=this.queryElements.filter(item=>{return item.type=='button'||item.type=='search'});\n        },\n        queryBtnClick(params,btn){\n            console.log(\"queryBtnClick\",params);\n            if(btn.click&& typeof btn.click==\"function\"){\n                btn.click(params);\n            }else{\n                if(this.$attrs.clickConfig&& typeof this.$attrs.clickConfig==\"function\"){\n                    this.$attrs.clickConfig(params)\n                }\n            }\n        },\n        submitForm(formName) {\n            let that=this;\n            this.$refs[formName].validate((valid) => {\n               // console.log(this.form)\n                if (valid) {\n                    //alert('submit!');\n                    let config = this.$attrs.config;\n                    let resultData=JSON.parse(JSON.stringify(that.form))\n                    if(config.saveData&&typeof config.saveData==\"function\"){\n                        Object.keys(resultData).filter(key=>key.indexOf(\"temp_\")>=0).forEach(targetKey=>{\n                            /temp_([a-zA-Z]+)_([a-zA-Z_\\d]+)/.exec(targetKey);\n                            if(!resultData[RegExp.$1+'_params']){\n                                resultData[RegExp.$1+'_params']={};\n                            }\n                            resultData[RegExp.$1+'_params'][RegExp.$2]=resultData[targetKey];\n                            delete resultData[targetKey];\n                            //console.log(\"targetKey\",RegExp.$1,RegExp.$2)\n\n                        })\n                        console.log(\"resultData\",resultData)\n                        config.saveData(resultData);\n                    }\n                    /*this.saveData({\n                        url:'mall/merchant/create.json',\n                        method:'post',\n                        queryParam:this.form\n                    }).then(success=>{\n                        console.log(\"'mall/merchant/create.json' success\",success)\n                    },error=>{\n\n                    });*/\n                } else {\n                    console.log('error submit!!');\n                    return false;\n                }\n            });\n        },\n        cancle(){\n            let config = this.$attrs.config;\n            if(config.cancle&&typeof config.cancle==\"function\"){\n                config.cancle(this.form);\n            }\n        },\n        resetForm(formName) {\n            this.$refs[formName].resetFields();\n        },\n        setRules(item) {\n            let that = this;\n            let validateRules = item.validateRules; //||[{\"required\":true,maxlength:8,minlength:3}]\n            if (\n                validateRules == null ||\n                validateRules == \"\" ||\n                validateRules == undefined\n            ) {\n                that.rules[item.validateProp] = [];\n            } else {\n                //console.log(\"typeof validateRules\",typeof validateRules)\n                if (typeof validateRules === \"string\") {\n                    validateRules = JSON.parse(validateRules);\n                }\n                if (validateRules.length > 0) {\n                    let errorMessageMap = that.validate.errorMessageMap;\n                    let allRuleInOne = {};\n                    let allErrorInOne = {};\n                    let itemValidatorFunctions = [];\n                    validateRules.forEach(rule => {\n                        if (typeof rule.validator === \"function\") {\n                            let wrapValidatorFunction = {\n                                trigger: rule.trigger || \"change\",\n                                allErrorInOne: allErrorInOne,\n                                validator: (validator, value, callback) => {\n                                    let errorMessage = rule.validator(\n                                        validator,\n                                        value,\n                                        callback,\n                                        validate,\n                                        allRuleInOne,\n                                        that.form\n                                    );\n                                    errorMessage &&\n                                    errorMessage.then(data => {\n                                        if (data.code == 1) {\n                                            callback();\n                                        } else {\n                                            callback(\n                                                new Error(\n                                                    (validator.allErrorInOne &&\n                                                        validator.allErrorInOne[data.errorCode]) ||\n                                                    data.msg\n                                                )\n                                            );\n                                        }\n                                    });\n                                }\n                            };\n                            itemValidatorFunctions.push(wrapValidatorFunction);\n                        } else {\n                            Object.keys(rule).forEach(validateItem => {\n                                let tipMessage = errorMessageMap[validateItem];\n                                if (typeof tipMessage == \"function\") {\n                                    allErrorInOne[validateItem] = errorMessageMap[validateItem]({\n                                        label: item.label,\n                                        length: rule[validateItem]\n                                    });\n                                } else {\n                                    //console.log(\"***************\",rule)\n                                    allErrorInOne[validateItem] = errorMessageMap[validateItem];\n                                }\n                            });\n                            allRuleInOne = Object.assign(allRuleInOne, rule);\n                        }\n                    });\n                    let tempValidator = {\n                        trigger: \"change\",\n                        allErrorInOne: allErrorInOne,\n                        validator: (validator, value, callback) => {\n                            //console.log(\"addInputList\",validator,value)\n                            let errorMessage = validate.validator(\n                                value,\n                                allRuleInOne,\n                                that.form\n                            );\n                            errorMessage.then(data => {\n                                if (data.code == 1) {\n                                    callback();\n                                } else {\n                                    callback(\n                                        new Error(\n                                            (validator.allErrorInOne &&\n                                                validator.allErrorInOne[data.errorCode]) ||\n                                            data.msg\n                                        )\n                                    );\n                                }\n                            });\n                        }\n                    };\n                    that.rules[item.validateProp || item.prop] = [\n                        allRuleInOne[\"required\"]\n                            ? { required: true, message: allErrorInOne[\"required\"] }\n                            : {},\n                        ...itemValidatorFunctions,\n                        tempValidator\n                    ];\n                }\n            }\n        },\n        saveAppSuccess(response, file, fileList,queryItem){\n            // console.log(/*response,file,fileList,*/queryItem)\n            let that=this;\n            let successUpload=queryItem.imgUploadConfig&&queryItem.imgUploadConfig.successUpload;\n            if(successUpload&& typeof successUpload == \"function\"){\n                let checkResult=successUpload(response,file,queryItem,this.form);\n                if(checkResult){\n                    if(checkResult instanceof Promise){\n                        checkResult.then(success=>{\n                            that.form[queryItem.prop] = success.data;\n                        },error=>{\n                            that.$msgbox(error.msg);\n                            //reject({msg:error.msg});\n                        })\n                    }\n                }\n            }else{\n                that.form[queryItem.prop] = response.data.fileUrls[0];\n            }\n            this.$nextTick(function(){\n                that.loading&&that.loading.close();\n            })\n        },\n        onchangeUpload(data,data2,data3){\n           // console.log(\"onchangeUpload\",data,data2,data3)\n            this.choosedAppIcon=data;\n        },\n        uploadProgress(...params) {\n            //console.log(\"params\",...params)\n        },\n        uploadError(...params) {\n            //console.log(\"params\",...params);\n            let that=this;\n            that.$nextTick(function(){\n                that.loading&&that.loading.close();\n            })\n            that.$message({\n                duration:0,\n                showClose:true,\n                type:'error',\n                message:'都是我不好,刚刚上传失败了,可能包太大可能网不好,请你稍后再重试!!'\n            })\n        },\n        beforeIconUpload(file,queryItem) {\n\n            let that=this;\n            //console.log(\"beforeIconUpload\",file,queryItem)\n            return new Promise(function (resolve,reject) {\n                //console.log(that.choosedAppIcon)\n                let beforeUpload=queryItem.imgUploadConfig&&queryItem.imgUploadConfig.beforeUpload;\n\n                if(beforeUpload&& typeof beforeUpload == \"function\"){\n                    let checkResult=beforeUpload(file,queryItem);\n                    if(checkResult){\n                        if(checkResult instanceof Promise){\n                            checkResult.then(success=>{\n                                resolve({code:1,msg:'success'})\n                                that.loading = that.$loading({\n                                    lock: true,\n                                    text: 'Loading',\n                                    spinner: 'el-icon-loading',\n                                    background: 'rgba(0, 0, 0, 0.3)'\n                                });\n                            },error=>{\n                                that.$msgbox(error.msg);\n                                reject({msg:error.msg});\n                            })\n                        }\n                    }\n                }else{\n                    if(!(file.type==\"image/png\"||file.type==\"image/jpg\"||file.type==\"image/jpeg\")){\n                        that.$message.error('请选择.png/jpg/jpeg图片');\n                        reject({msg:\"please choose png image\"});\n                    }\n                }\n\n                //console.log(\"beforeIconUpload111\",file,queryItem)\n\n\n                if(that.choosedAppIcon!=null&&(queryItem.imgUploadConfig&&!queryItem.imgUploadConfig.notImage||queryItem.imgUploadConfig==null)){\n                    let choosedImage=that.choosedAppIcon;\n                   // console.log(\"beforeIconUpload22\",choosedImage)\n\n                    let readResult=new FileReader();\n                    readResult.onload=function(data){\n                        let fileData=data.target.result;\n                        let image=new Image();\n                        image.src=fileData;\n                        image.onload=data=>{\n                            let imageData=data.path&&data.path[0]||data.target;\n                            let imageWidth=imageData.width,imageHeight=imageData.height;\n                            let beforeUploadImageSize=queryItem.imgUploadConfig&&queryItem.imgUploadConfig.beforeUploadImageSize;\n                            if(beforeUploadImageSize&& typeof beforeUploadImageSize == \"function\"){\n                                let checkResult=beforeUploadImageSize(imageWidth,imageHeight,file,queryItem);\n                                if(checkResult){\n                                    if(checkResult instanceof Promise){\n                                        return checkResult.then(success=>{\n                                            that.loading = that.$loading({\n                                                lock: true,\n                                                text: 'Loading',\n                                                spinner: 'el-icon-loading',\n                                                background: 'rgba(0, 0, 0, 0.3)'\n                                            });\n                                            resolve({msg:\"success\"})\n                                        },error=>{\n                                            that.$msgbox(error.msg);\n                                            reject({msg:error.msg});\n                                        })\n                                    }\n                                }\n                            }else{\n                                if(!(file.type==\"image/png\"||file.type==\"image/jpg\"||file.type==\"image/jpeg\")){\n                                    that.$message.error('请选择.png/jpg/jpeg图片');\n                                    reject({msg:\"please choose png image\"});\n                                }\n                            }\n\n                            if(queryItem.imgUploadConfig&&(queryItem.imgUploadConfig.width!=undefined)&&queryItem.imgUploadConfig.height!=undefined&&(imageWidth!=queryItem.imgUploadConfig.width||imageHeight!=queryItem.imgUploadConfig.height)){\n                                let errorMessage='图片大小必须为'+queryItem.imgUploadConfig.width+'px*'+queryItem.imgUploadConfig.height+'px';\n                                that.$msgbox(errorMessage);\n                                reject({msg:errorMessage});\n                            }else{\n                                that.loading = that.$loading({\n                                    lock: true,\n                                    text: 'Loading',\n                                    spinner: 'el-icon-loading',\n                                    background: 'rgba(0, 0, 0, 0.3)'\n                                });\n                                resolve({msg:\"success\"})\n                            }\n                        }\n                    }\n                    readResult.readAsDataURL(file);\n                }\n            })\n\n        },\n        dataBus(props,data){\n            //console.log(\"************\",props,data)\n            this.form[props.prop]=data&&data.join(\"||||\")||\"\";\n        },\n        initPage(){\n            let that=this;\n\n            let config=this.$attrs.config;\n\n            //console.log(\"*****************initPage*******************\")\n\n            that.readonly=config.readonly||false;\n            this.queryElements=config.queryElements;\n            this.queryElements.forEach(item=>{\n                //item.readonly=config.readonly||true;\n                if(item.type=='button'||item.type=='search'){\n\n                }else if(item.type=='composite'){\n                    item.components.forEach(component=>{\n                        that.$set(that.form,component.prop,component.default||component.defaultValue||'');\n                        that.setRules(component);\n                    })\n                }else{\n                    that.$set(that.form,item.prop,item.default||item.defaultValue||'');\n                    that.setRules(item);\n                    if(item.switchElements&& item.switchElements instanceof  Array){\n                        item.switchElements.forEach(i=>{\n                            that.$set(that.form,i.prop,i.default||'');\n                            that.setRules(i);\n                        })\n                    }\n                }\n                if(item.dataBus){\n                    item.dataBus=that.dataBus;\n                    if(item.type=='addImages'){\n                        item.imagesListConfig.dataBus=that.dataBus;\n                    }\n                }\n            });\n            this.initQueryElement();\n            let formData=config.formData;\n            if(formData){\n                Object.keys(formData).forEach(key=>{\n                    that.$set(that.form,key,formData[key]);\n                })\n            }\n        },\n        groupedStyle(groupElements){\n            let groupStyle=null;\n            groupElements.forEach(item=>{\n                if(!groupStyle&&item.groupedStyle){\n                    groupStyle=item.groupedStyle;\n                }\n            })\n            //console.log(\"groupElements\",groupElements)\n            return groupStyle||{border:'1px dashed #eeee',display:'inline-block',width:'80%',marginLeft:'10%',background:'linear-gradient(#67c23a61, #409eff8c)',marginBottom:'0px'};\n        },\n        elementWatch(queryItem){\n            let that=this;\n            if((!queryItem.watch)||Object.keys(queryItem.watch).length==0) return true;//没有观察对象或观察对象没有键值对\n\n            let watchProps=Object.keys(queryItem.watch.watchValue);\n\n            let allCheckResult=watchProps.map(prop=>{\n                // 如果 观察属性没有配置值 默认展示 {name:null}\n                // 如果 观察属性map配置值 默认展示 {state:{1:true,2:true,5:true,8:false}}\n                // 如果 观察属性函数配置值 默认展示 {state:data=>{}}\n                let propWatchConfig=queryItem.watch.watchValue[prop];\n                //console.log(prop,\" _.type(propWatchConfig)\",propWatchConfig, _.isMap(propWatchConfig), _.isFunction(propWatchConfig))\n                if(propWatchConfig){\n                    if(_.isFunction(propWatchConfig)){\n                        return propWatchConfig(prop,that.form,queryItem);\n                    }else{\n                        return propWatchConfig[that.form[prop]]!=true\n                    }\n                }\n            });\n            return allCheckResult.filter(item=>item==true).length==0\n        },\n    },\n    created() {\n        let that=this;\n        that.initPage();\n\n        this.$watch(\"$attrs.config.queryElements\",function (newValue,oldValue) {\n            that.initPage();\n        },{\n            deep:false\n        })\n\n        this.$watch(\"$attrs.config.formData\",function (newValue,oldValue) {\n            if(newValue){\n                Object.keys(newValue).forEach(key=>{\n                    that.$set(that.form,key,newValue[key]);\n                })\n            }\n        },{\n            deep:true\n        })\n    },\n    computed:{\n        elementGroup(){\n            this.$attrs.config.queryElements.map((item,seq)=>{item.order=seq*10000})\n            let allElements=_.flatten(Object.values(this.tempQueryElements)).concat(this.$attrs.config.queryElements);\n            allElements=_.sortBy(allElements,item=>item.order);\n            return _.groupBy(allElements,item=>item.groupedName)\n        },\n        allElement(){\n            /*let allElements=_.flatten(Object.values(this.elementGroup));\n            allElements=_.sortBy(allElements,item=>item.order);\n            let cloneAllElements=_.cloneDeep(allElements);\n\n            cloneAllElements.map(item=>{\n                Object.keys(item).forEach(key=>{\n                    if(key.indexOf(\"Handler\")){\n                        item[key]=item[key].toString();\n                    }\n                })\n            })*/\n\n            return [];\n        },\n\n    }\n}\n",{"version":3,"sources":["baseFormCreater.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"baseFormCreater.vue","sourceRoot":"src/components/formCreater","sourcesContent":["/* eslint-disable */\n<template>\n    <div :class = \"{readonlyContainer:readonly,editorModule:$attrs.config.editorModule||false}\">\n        <div class=\"searchContainer\" >\n            <div class=\"elementsContainer\">\n                <el-form ref=\"form\" :model=\"form\" :rules=\"rules\" :style=\"$attrs.config.formStyle||{}\" :label-width=\"$attrs.config.labelWidth||'180px'\">\n                      <span v-for=\"(groupName,groupIndex) in Object.keys(elementGroup)\" :key=\"'grouped_key'+groupIndex+'_'+groupName\" :style=\"groupedStyle(elementGroup[groupName])\">\n                          <span class=\"queryElement\" :class=\"{\n                              hidden:queryItem.type=='hidden',\n                              tabContainer:queryItem.type=='tab',\n                              tableClass:queryItem.type=='communityChoose',\n                              switchContainer:queryItem.switchElements,\n                              switchElement:queryItem.switchElements\n                            }\" v-for=\"(queryItem,eleIndex) in elementGroup[groupName]\"\n                                :style=\"queryItem.containerStyle||{position: 'relative'}\"\n                                :key=\"queryItem.prop+'_'+queryItem.label+'_'+eleIndex\"\n                          >\n                            <span class=\"editorOperateContainer\">\n                                <span @click=\"$attrs.config.editorFormHandler('del',queryItem,eleIndex)\" style=\"color: #f00;\" title=\"删除当前元素\">删除</span>\n                                <span v-if=\"eleIndex\" @click=\"$attrs.config.editorFormHandler('up',queryItem,eleIndex)\" title=\"上移动一个位置\">上移动</span>\n                                <span v-if=\"eleIndex!=elementGroup[groupName].length-1\" @click=\"$attrs.config.editorFormHandler('down',queryItem,eleIndex)\" title=\"下移动一个位置\">下移动</span>\n                            </span>\n                            <template  v-if=\"queryItem.type=='input'&&elementWatch(queryItem)\"  >\n                                <el-form-item :label=\"queryItem.label\" :prop=\"queryItem.prop\">\n                                  <el-col :span=\"queryItem.span||8\">\n                                    <template v-if=\"queryItem.preText\">{{queryItem.preText}}</template>\n                                    <el-input v-if=\"!(queryItem.readonly||readonly)\" :type=\"queryItem.inputType||''\" :style=\"queryItem.style||{}\" :rows=\"queryItem.rows||1\" v-model=\"form[queryItem.prop]\" :disabled=\"queryItem.readonly||readonly\" :placeholder=\"queryItem.placeholder\">\n                                    </el-input>\n                                    <span v-if=\"queryItem.readonly||readonly\" v-html=\"form[queryItem.prop]\"></span>\n                                    <template v-if=\"queryItem.rightBtn&&!(queryItem.readonly||readonly)\"><span @click=\"queryItem.rightBtnClick(form,queryItem)\" v-html=\"queryItem.rightBtn\"></span></template>\n                                    <template v-if=\"queryItem.subText&&!(queryItem.readonly||readonly)\"><span v-html=\"queryItem.subText\"></span></template>\n                                    <div v-if=\"!(queryItem.readonly||readonly)\" style=\"color: #f00;font-size: 12px;line-height: 20px;\">\n                                        {{queryItem.tip}}\n                                    </div>\n                                  </el-col>\n                                </el-form-item>\n                            </template>\n                            <template  v-if=\"queryItem.type=='cascader'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\"  >\n                                <el-form-item :label=\"queryItem.label\" :prop=\"queryItem.prop\">\n                                  <el-col :span=\"queryItem.span||8\">\n                                    <template v-if=\"queryItem.preText\">{{queryItem.preText}}</template>\n                                    <el-cascader\n                                            expand-trigger=\"hover\"\n                                            :style=\"queryItem.cascaderStyle||{width:'400px'}\"\n                                            :label=\"queryItem.itemLabel\"\n                                            :value=\"queryItem.itemValue\"\n                                            :disabled=\"queryItem.readonly||readonly\"\n                                            :options=\"queryItem.cascaderOptions\"\n                                            v-model=\"form[queryItem.prop]\">\n                                    </el-cascader>\n                                    <template v-if=\"queryItem.rightBtn\"><span @click=\"queryItem.rightBtnClick\" v-html=\"queryItem.rightBtn\"></span></template>\n                                    <template v-if=\"queryItem.subText\"><span v-html=\"queryItem.subText\"></span></template>\n                                    <div style=\"color: #f00;font-size: 12px;line-height: 20px;\">\n                                        {{queryItem.tip}}\n                                    </div>\n                                  </el-col>\n                                </el-form-item>\n                            </template>\n                            <template  v-if=\"queryItem.type=='date'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\"  >\n                                <el-form-item :prop=\"queryItem.prop\" :label=\"queryItem.label\">\n                                  <el-date-picker type=\"date\" :placeholder=\"queryItem.placeholder\" v-model=\"form[queryItem.prop]\" ></el-date-picker>\n                                </el-form-item>\n                            </template>\n                            <template  v-if=\"queryItem.type=='button'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\"  >\n                                <el-form-item :prop=\"queryItem.prop\" :label=\"queryItem.label\">\n                                    <el-button :class=\"queryItem.class\" :type=\"queryItem.type||'info'\" :style=\"queryItem.style\" @click=\"queryItem.click&&queryItem.click(queryItem)\">{{queryItem.buttonLabel}}</el-button>\n                                </el-form-item>\n                            </template>\n                            <template  v-if=\"queryItem.type=='upload'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\"  >\n                                <el-form-item :prop=\"queryItem.prop\" :label=\"queryItem.label\">\n\n                                  <el-col :span=\"queryItem.span||8\">\n                                      <div v-if=\"queryItem.imgUploadConfig&&queryItem.imgUploadConfig.notImage\">{{form[queryItem.prop]}}</div>\n                                      <img v-else :src=\"form[queryItem.prop]\" style=\"width: 100px;height: 100px;vertical-align: middle;border:1px solid #eee;display: inline-block;\" alt=\"\">\n                                      <el-upload\n                                              class=\"upload-demo\"\n                                              name=\"file\"\n                                              v-if=\"!readonly\"\n                                              :show-file-list=\"false\"\n                                              action=\"/api-backend/fileUpload.json\"\n                                              :on-progress=\"function(...params){\n                                            return uploadProgress(params,queryItem)\n                                          }\"\n                                              :on-error=\"function(...params){\n                                            return uploadError(params,queryItem)\n                                          }\"\n                                              :on-change=\"function(param){\n                                            return onchangeUpload(param,queryItem)\n                                          }\"\n                                              :style=\"queryItem.style||{}\"\n                                              :disabled=\"readonly\"\n                                              :before-upload=\"function(file) {\n                                            return beforeIconUpload(file,queryItem)\n                                          }\"\n                                              :on-success=\"function(response, file, fileList) {\n                                            return saveAppSuccess(response, file, fileList,queryItem)\n                                          }\">\n                                            <el-button size=\"small\" type=\"primary\" v-if=\"!readonly\">点击上传</el-button>\n                                            <div slot=\"tip\" v-if=\"!readonly\" class=\"el-upload__tip\">\n                                                <div v-html=\"queryItem.tip\"></div>\n                                            </div>\n                                      </el-upload>\n                                  </el-col>\n                                  <template v-if=\"queryItem.subText&&!(queryItem.readonly||readonly)\"><span v-html=\"queryItem.subText\"></span></template>\n                                    <!--<el-input v-model=\"form[queryItem.prop]\" style=\"display: none\" placeholder=\"\"></el-input>-->\n                                </el-form-item>\n                            </template>\n                            <template  v-if=\"queryItem.type=='import'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\"  >\n                                <el-form-item :prop=\"queryItem.prop\" :label=\"queryItem.label\">\n                                  <img :src=\"form[queryItem.prop]\" style=\"width: 100px;height: 100px;vertical-align: middle;\" alt=\"\">\n                                  <el-upload\n                                          class=\"upload-demo\"\n                                          name=\"file\"\n                                          :show-file-list=\"true\"\n                                          :data=\"form\"\n                                          :ref=\"'import_'+queryItem.prop\"\n                                          :auto-upload=\"false\"\n                                          :action=\"queryItem.url\"\n                                          :on-change=\"function(param){\n                                            return onchangeUpload(param,queryItem)\n                                          }\"\n                                          :disabled=\"readonly\"\n                                          :before-upload=\"function(file) {\n                                            return beforeIconUpload(file,queryItem)\n                                          }\"\n                                          :on-success=\"function(response, file, fileList) {\n                                            return saveAppSuccess(response, file, fileList,queryItem)\n                                          }\">\n                                        <el-button size=\"small\" type=\"primary\" v-if=\"!readonly\">{{queryItem.buttonLabel||'点击上传'}}</el-button>\n                                        <div slot=\"tip\" class=\"el-upload__tip\">\n                                            {{queryItem.tip}}\n                                        </div>\n                                  </el-upload>\n                                    <!--<el-input v-model=\"form[queryItem.prop]\" style=\"display: none\" placeholder=\"\"></el-input>-->\n                                </el-form-item>\n                            </template>\n                            <template  v-if=\"queryItem.type=='addInput'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\"  > \n                                <el-form-item :prop=\"queryItem.prop\" :label=\"queryItem.label\"> \n                                    <add-input :config=\"queryItem\"></add-input> \n                                    <span style=\"display: none\"> \n                                        <el-input v-model=\"form[queryItem.prop]\" hidden :placeholder=\"queryItem.placeholder\"></el-input> \n                                    </span> \n                                </el-form-item> \n                            </template> \n                            <template  v-if=\"queryItem.type=='chooseBtn'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\"  :style=\"{'margin-top':'10px','padding-right': '10px',width:queryItem.width||'100%',display: 'inline-block'}\"> \n                                <el-form-item :prop=\"queryItem.prop\" :label=\"queryItem.label\"> \n                                    <choose-btn :config=\"Object.assign(queryItem,{readonly:readonly})\" :readData=\"form\"></choose-btn> \n                                    <span style=\"display: none\"> \n                                        <el-input v-model=\"form[queryItem.prop]\" hidden :placeholder=\"queryItem.placeholder\"></el-input> \n                                    </span> \n                                </el-form-item> \n                            </template>\n                            <template  v-if=\"queryItem.type=='communityChoose'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\"  :style=\"{'margin-top':'10px','padding-right': '10px',width:queryItem.width||'100%',display: 'inline-block'}\"> \n                                <el-form-item :prop=\"queryItem.prop\" :label=\"queryItem.label\"> \n                                    <community-choose :config=\"queryItem\" :readData=\"form\"></community-choose> \n                                    <span style=\"display: none\"> \n                                        <el-input v-model=\"form[queryItem.prop]\" hidden :placeholder=\"queryItem.placeholder\"></el-input> \n                                    </span> \n                                </el-form-item> \n                            </template>\n                            <template  v-if=\"queryItem.type=='communityPropertyChoose'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\"   :style=\"{'margin-top':'10px','padding-right': '10px',width:queryItem.width||'100%',display: 'inline-block'}\"> \n                                <el-form-item :prop=\"queryItem.prop\" :label=\"queryItem.label\"> \n                                    <community-property-choose :config=\"queryItem\" :readData=\"form\"></community-property-choose> \n                                    <span style=\"display: none\"> \n                                        <el-input v-model=\"form[queryItem.prop]\" hidden :placeholder=\"queryItem.placeholder\"></el-input> \n                                    </span> \n                                </el-form-item> \n                            </template>\n                            <template  v-if=\"queryItem.type=='switchBtn'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\"  >\n                                <el-form-item :prop=\"queryItem.prop\" :label=\"queryItem.label\">\n                                  <el-switch :placeholder=\"queryItem.placeholder\" v-model=\"form[queryItem.prop]\"></el-switch>\n                                </el-form-item>\n                            </template>\n                            <template  v-if=\"queryItem.type=='checkbox'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\">\n                                <span v-if=\"!queryItem.dataUrl\">\n                                  <el-form-item :label=\"queryItem.label\" :prop=\"queryItem.prop\" >\n                                    <el-checkbox-group v-model=\"form[queryItem.prop]\"  >\n                                      <el-checkbox v-for=\"item in queryItem.items\" :label=\"item.code\"  :key=\"item.code+item.value+item.id+'_checkbox'+item.label+'_'+eleIndex\">{{item.label}}</el-checkbox>\n                                    </el-checkbox-group>\n                                  </el-form-item>\n                                </span>\n                                <span v-if=\"queryItem.dataUrl\">\n                                  <el-form-item :label=\"queryItem.label\" :prop=\"queryItem.prop\">\n                                    <el-checkbox-group v-model=\"form[queryItem.prop]\">\n                                      <el-checkbox-button v-for=\"item in dataQuery.query[queryItem.propList]\" :key=\"item.code+item.value+item.id+'_checkbox'+item.label+'_'+eleIndex\" :label=\"item.label\" :name=\"queryItem.prop+'checkbox'\"></el-checkbox-button>\n                                    </el-checkbox-group>\n                                  </el-form-item>\n                                </span>\n                            </template>\n                            <template  v-if=\"queryItem.type=='radio'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\">\n                                <template v-if=\"!queryItem.dataUrl\">\n                                  <el-form-item :label=\"queryItem.label\" :prop=\"queryItem.prop\">\n                                    <el-radio-group v-model=\"form[queryItem.prop]\" :size=\"queryItem.items.length+''\">\n                                      <el-radio border v-for=\"item in queryItem.items\" :disabled=\"queryItem.readonly||readonly\" :label=\"item.code\" :name=\"queryItem.prop+'checkbox'\" :key=\"item.code+item.value+item.id+'_radio'+item.label+'_'+eleIndex\">{{item.label}}</el-radio>\n                                    </el-radio-group>\n                                  </el-form-item>\n                                </template>\n                                <template v-if=\"queryItem.dataUrl\">\n                                  <el-form-item :label=\"queryItem.label\" :prop=\"queryItem.prop\">\n                                    <el-radio-group v-model=\"form[queryItem.prop]\">\n                                      <el-radio border v-for=\"item in dataQuery.query[queryItem.propList]\" :label=\"item.code\" :name=\"queryItem.prop+'checkbox'\" :key=\"item.code+item.value+item.id+'_radio'+item.label+'_'+eleIndex\">{{item.label}}</el-radio>\n                                    </el-radio-group>\n                                  </el-form-item>\n                                </template>\n                            </template>\n                            <template   v-if=\"queryItem.type=='html'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\">\n                                    <el-form-item :prop=\"queryItem.prop\" :label=\"queryItem.label\" :style=\"queryItem.style||{}\" :class=\"queryItem.className\">\n                                        <div v-html=\"queryItem.dataHandler?queryItem.dataHandler(form[queryItem.prop],form):form[queryItem.prop]\" :style=\"{background: queryItem.background||'#9c9c9c'}\"></div>\n                                    </el-form-item>\n                            </template>\n                          <template   v-if=\"queryItem.type=='addImages'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\">\n                                    <el-form-item :prop=\"queryItem.prop\" :label=\"queryItem.label\">\n                                        <add-images :config=\"queryItem\"></add-images>\n                                    </el-form-item>\n                            </template>\n                            <template  v-if=\"queryItem.type=='select'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\">\n                                <template v-if=\"!queryItem.dataUrl\">\n                                  <el-form-item :label=\"queryItem.label\" :prop=\"queryItem.prop\">\n                                    <el-select v-model=\"form[queryItem.prop]\" :placeholder=\"queryItem.defaultLabel\" :disabled=\"queryItem.readonly||readonly\" @change=\"changeQueryParam(queryItem)\">\n                                      <el-option :label=\"queryItem.defaultLabel||'请选择'\" :value=\"queryItem.defaultValue||''\"></el-option>\n                                      <el-option  v-for=\"(component,componentIndex) in queryItem.options\" :value=\"component.value||component.code||component.id\" :label=\"component.label||component.name\" :key=\"component.code+component.value+component.id+'_select'+component.label+'_'+eleIndex+'_'+componentIndex\"></el-option>\n                                    </el-select>\n                                  </el-form-item>\n                                </template>\n                                <template v-if=\"queryItem.dataUrl\">\n                                  <el-form-item :label=\"queryItem.label\" :prop=\"queryItem.prop\">\n                                    <el-select v-model=\"form[queryItem.prop]\" :placeholder=\"queryItem.defaultLabel\" :disabled=\"queryItem.readonly||readonly\" @change=\"changeQueryParam(queryItem)\">\n                                      <el-option :label=\"queryItem.defaultLabel||'请选择'\" :value=\"queryItem.defaultValue||''\"></el-option>\n                                      <el-option  v-for=\"(component,componentIndex) in dataQuery.query[queryItem.propList]\" :value=\"component.value||component.code||component.id\" :label=\"component.label||component.name||component.desc\" :key=\"component.code+component.value+component.id+'_select'+component.label+'_'+eleIndex+'_'+componentIndex\"></el-option>\n                                    </el-select>\n                                  </el-form-item>\n                                </template>\n                            </template>\n                            <template  v-if=\"queryItem.type=='datetimerange'&&(queryItem.watch&&queryItem.watch.props?queryItem.watch.props.map(prop=>{\n                                return queryItem.watch.watchValue[prop]&&queryItem.watch.watchValue[prop][form[prop]]!=true\n                            }).filter(item=>item==true).length==0:true)\">\n                                <el-form-item :prop=\"queryItem.prop\" :label=\"queryItem.label\"> \n                                    <el-date-picker\n                                            v-model=\"form[queryItem.prop]\"\n                                            :type=\"queryItem.dateType||'datetimerange'\"\n                                            :disabled=\"queryItem.readonly||readonly\"\n                                            :picker-options=\"queryItem.options\"\n                                            :range-separator=\"queryItem.centerLabel||'至'\"\n                                            :placeholder=\"queryItem.placeholder||'请选择时间范围'\"\n                                            :format=\"queryItem.format||'yyyy-MM-dd hh:mm:ss'\"\n                                            @change=\"data=>{\n                                                form[queryItem.prop]=data.split((queryItem.centerLabel||'至'));\n                                            }\"\n                                            align=\"right\">\n                                    </el-date-picker>\n                                </el-form-item> \n                            </template>\n                      </span>\n                      </span>\n                </el-form>\n                <div v-if=\"!$attrs.config.noneSaveBtn\" :style=\"$attrs.config.btnContainerStyle||{}\">\n                    <el-button type=\"primary\" v-if=\"!readonly\" @click=\"submitForm('form')\" :style=\"$attrs.config.confirmBtnStyle||{width:'220px'}\">{{$attrs.config.saveBtnlabel||(form[\"id\"]?\"立即更新\":'立即创建')}}</el-button>\n                    <el-button @click=\"cancle\" :style=\"$attrs.config.cancleBtnStyle||{width:'220px'}\">{{$attrs.config.cancleBtnlabel||'取消'}}</el-button>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n\n    import backendService from '../remoteService/backendService'\n    import validate from './../validate/validate'\n    import addInput from './addInput'\n    import chooseBtn from './chooseBtn'\n    import orderUploadImages from './addImages'\n\n    export default {\n        name: 'base-form-creater',\n        components:{\n            'add-input':addInput,\n            'choose-btn':chooseBtn ,\n            'add-images':orderUploadImages\n        },\n        data(){\n            return{\n                validate:validate,\n                formKey:Math.ceil(Math.random()*10000000),\n                rules:{\n                },\n                ruleForm:{},\n                queryElements:[],\n                dataQuery:{\n                    query:{}\n                },\n                form:{},\n                queryButtons:[],\n                readonly:false,\n                editorModule:false,\n                tempQueryElements:{}\n            }\n        },\n        methods:{\n            queryListData(params){\n                return backendService.getData({\n                    url:params.url,\n                    method:params.method||\"post\",\n                    data:params.form\n                }).then(function (result) {\n                    return Promise.resolve(result)\n                })\n            },\n            changeQueryParam:function (data,operate) {\n                    let casecadeChild=data.casecadeChild;\n                    let casecadeGrandsonList=data.casecadeGrandsonList;\n                    let cleanMap={};\n                    if(casecadeChild){\n                        cleanMap[casecadeChild]=casecadeChild;\n                    }\n\n                    if(casecadeGrandsonList&&casecadeGrandsonList.length>0){\n                        casecadeGrandsonList.forEach(childItem=>{\n                            cleanMap[childItem]=childItem;\n                        })\n                    }\n                    let allChildKey=Object.values(cleanMap)\n                    let that=this;\n                    allChildKey.forEach(cleanKey=>{\n                        //console.log(\"cleanKey\",cleanKey)\n                        that.$set(that.form,cleanKey,'');\n                    })\n\n                    that.$set(that.tempQueryElements,casecadeChild,[])//清空子元素关联临时值\n\n                    that.queryElements.map(itemElement=>{\n                        if(cleanMap[itemElement.prop]){\n                            itemElement.defaultValue=\"\";\n                            itemElement.value=\"\";\n                        }\n                        return itemElement;\n                    })\n                    this.changeHelp(data,operate);\n            },\n            changeHelp(prop){\n                let that=this;\n                if(prop.type==\"select\"){\n                    let currentSwitchValue=this.form[prop.prop];\n                    if(prop.switchElements){\n                        let needInitSelected=[].filter.call(prop.switchElements,(item)=>{if(item.whenSwitchValue==currentSwitchValue){ return true;}})[0];\n                        //console.log(\"needInitSelected\",needInitSelected)\n                        if(needInitSelected){\n                            let form=needInitSelected.noNeedAllParams?{}:this.form;\n                            if(needInitSelected.otherParam){\n                                form=Object.assign(form,needInitSelected.otherParam)\n                            }\n                            for(let key in needInitSelected.dropProps){\n                                delete form[needInitSelected.dropProps[key]];\n                            }\n                            let item=needInitSelected;\n                            if(!item.dataUrl) return;\n                            this.queryListData({url:item.dataUrl,form:form,httpMethod:item.httpMethod||\"get\"}).then((listData)=>{\n                                if(!listData) return;\n                                this.$set(this.dataQuery.query,item.propList,item.dataHandler?item.dataHandler(listData):listData[item.propValueList])\n                                this.form[item.prop]=item.defaultValue;\n                                // console.log(\"**** item\",item,this.dataQuery.query)\n                            },(error)=>{\n                                console.log(error);\n                            });\n                        }\n                    }else if(prop.casecadeChild){\n                        let form=prop.noNeedAllParams?{}:this.form;\n                        if(prop.casecadeChild.otherParam){\n                            form=Object.assign(form,prop.otherParam)\n                        }\n                        let casecadeChild=this.findCasecadeChild(prop.casecadeChild);\n                        if(casecadeChild.extendsProp){\n                            if(casecadeChild.extendsProp instanceof Array){\n                                for(let seq in casecadeChild.extendsProp){\n                                    let key=casecadeChild.extendsProp[seq];\n                                    form[key]=currentSwitchValue;\n                                }\n                            }else{\n                                for(let seq in Object.keys(casecadeChild.extendsProp)){\n                                    let key=Object.keys(casecadeChild.extendsProp)[seq];\n                                    let targetParam=casecadeChild.extendsProp[key];\n                                     console.log(\"key\",key,\"targetParam\",targetParam,this.form[targetParam])\n                                    form[key]=this.form[targetParam];\n                                }\n                            }\n\n                        }\n                        let item=casecadeChild;\n                        this.queryListData({url:item.dataUrl,form:form,httpMethod:item.httpMethod||\"get\"}).then((listData)=>{\n                            if(!listData) return;\n                            let resultData=item.dataHandler?item.dataHandler(listData):listData[item.propValueList];\n                            this.$set(this.dataQuery.query,item.propList,resultData)\n                            this.form[item.prop]=item.defaultValue;\n                            let that=this;\n                            if(item.createFormItem){\n                                Object.keys(that.form).filter(key=>key.indexOf(\"temp_\"+item.prop+\"_\")>=0).forEach(deleteKey=>{\n                                    //console.log(\"deleteKey\",deleteKey)\n                                    delete that.form[deleteKey];\n                                })\n                                Object.keys(that.rules).filter(key=>key.indexOf(\"temp_\"+item.prop+\"_\")>=0).forEach(deleteKey=>{\n                                    //console.log(\"deleteRuleKey\",deleteKey)\n                                    delete that.rules[deleteKey];\n                                })\n                                resultData.forEach(formItem=>{\n                                    formItem.validateProp='temp_'+item.prop+'_'+(formItem.prop||formItem.id);\n                                    that.form[formItem.validateProp]=formItem.defaultValue||formItem.default||'';\n                                    that.setRules(formItem)\n                                })\n                            }\n                            //console.log(\"**** casecadeChild\",casecadeChild,this.dataQuery.query)\n                        },(error)=>{\n                            console.log(error);\n                        });\n                    }else if(prop.extendChild){\n                        console.log(\"prop\",prop)\n                        let form=prop.noNeedAllParams?{}:this.form;\n                        if(prop.casecadeChild.otherParam){\n                            form=Object.assign(form,prop.otherParam)\n                        }\n                        let casecadeChild=prop.extendChild;\n                        if(casecadeChild.dataHandler){\n                            casecadeChild.dataHandler=eval(casecadeChild.dataHandler);\n                        }\n                        if(casecadeChild.extendsProp){\n                            if(casecadeChild.extendsProp instanceof Array){\n                                for(let seq in casecadeChild.extendsProp){\n                                    let key=casecadeChild.extendsProp[seq];\n                                    form[key]=currentSwitchValue;\n                                }\n                            }else{\n                                for(let seq in Object.keys(casecadeChild.extendsProp)){\n                                    let key=Object.keys(casecadeChild.extendsProp)[seq];\n                                    let targetParam=casecadeChild.extendsProp[key];\n                                    console.log(\"key\",key,\"targetParam\",targetParam,this.form[targetParam])\n                                    form[key]=this.form[targetParam];\n                                }\n                            }\n\n                        }\n                        let item=casecadeChild;\n                        this.queryListData({url:item.dataUrl,form:form,httpMethod:item.httpMethod||\"get\"}).then((listData)=>{\n                            if(!listData) return;\n                            let resultData=item.dataHandler?item.dataHandler(listData,prop):listData[item.propValueList];\n                            console.log(\">>>>resultData\",item.prop,resultData)\n                            Object.keys(this.form).filter(key=>key.indexOf(\"temp_\"+item.prop+\"#\")>=0).forEach(deleteKey=>{\n                                //console.log(\"deleteKey\",deleteKey)\n                                delete this.form[deleteKey];\n                            })\n                            Object.keys(this.rules).filter(key=>key.indexOf(\"temp_\"+item.prop+\"#\")>=0).forEach(deleteKey=>{\n                                //console.log(\"deleteRuleKey\",deleteKey)\n                                delete this.rules[deleteKey];\n                            })\n                            resultData.forEach(formItem=>{\n                                this.setRules(formItem)\n                            })\n                            this.$set(this.tempQueryElements,prop.prop,resultData);\n                        },(error)=>{\n                            console.log(error);\n                        });\n                    }\n                }else if(prop.type=\"input\"){\n\n                }else{\n                    alert(\"no operate\")\n                }\n            },\n            findCasecadeChild(elementKey){\n                let result={};\n                for(let j=0;j<this.queryElements.length;j++){\n                    let item=this.queryElements[j];\n                    if(item.prop==elementKey){\n                        result=item;\n                        break;\n                    }\n\n                    if(item.switchElements){\n                        for(let i=0;i<item.switchElements.length;i++){\n                            let innerItem=item.switchElements[i];\n                            if(innerItem.prop == elementKey){\n                                result=innerItem;\n                            }\n                        }\n                    }\n                }\n                return result;\n            },\n            initQueryElement(){\n                /*n 级 级联查询开始*/\n                var form=this.form;\n                if(this.queryElements==null||this.queryElements.length==0) return;\n                var requestUrlParam= [].filter.call(this.queryElements, function (item) {\n                    if(item.dataUrl&&item.initQuery){\n                        return item;\n                    }\n                });\n\n                for(let seq in requestUrlParam){\n                    let item=requestUrlParam[seq];//选择初始化 默认初始化 顶级父元素 和 标记为包含includeInit 属性的 下拉元素\n                    if(item.casecadeParen==null||item.casecadeParen==\"\"||item.includeInit==true){\n                        /*顶级元素优先查询完成一级数据初始化*/\n\n                        let form=item.noNeedAllParams?{}:this.form;//参数是否使用表单\n                        if(item.otherParam){\n                            form=Object.assign(form,item.otherParam)\n                        }\n                        if(item.extendsProp){\n                            if(item.extendsProp instanceof Array){\n                                for(let seq in item.extendsProp){\n                                    let key=item.extendsProp[seq];\n                                    form[key]=this.form[key];\n                                }\n                            }else{\n                                for(let seq in Object.keys(item.extendsProp)){\n                                    let key=Object.keys(item.extendsProp)[seq];\n                                    let targetParam=item.extendsProp[key];\n                                     //console.log(\"key\",key,\"targetParam\",targetParam)\n                                    form[key]=this.form[targetParam];\n                                }\n                            }\n                        }\n\n                        this.queryListData({url:item.dataUrl,form:form,httpMethod:item.httpMethod||\"get\"}).then((listData)=>{\n                            if(!listData) return;\n                            this.$set(this.dataQuery.query,item.propList,item.dataHandler?item.dataHandler(listData):listData[item.propValueList])\n                            this.form[item.prop]=item.defaultValue;\n                            //console.log(\"****\",this.dataQuery.query)\n                        },(error)=>{\n                            console.log(error);\n                        });\n                    }\n                }\n                /*n 级 级联查询结束*/\n                this.queryButtons=this.queryElements.filter(item=>{return item.type=='button'||item.type=='search'});\n            },\n            queryBtnClick(params,btn){\n                console.log(\"queryBtnClick\",params);\n                if(btn.click&& typeof btn.click==\"function\"){\n                    btn.click(params);\n                }else{\n                    if(this.$attrs.clickConfig&& typeof this.$attrs.clickConfig==\"function\"){\n                        this.$attrs.clickConfig(params)\n                    }\n                }\n            },\n            submitForm(formName) {\n                let that=this;\n                this.$refs[formName].validate((valid) => {\n                   // console.log(this.form)\n                    if (valid) {\n                        //alert('submit!');\n                        let config = this.$attrs.config;\n                        let resultData=JSON.parse(JSON.stringify(that.form))\n                        if(config.saveData&&typeof config.saveData==\"function\"){\n                            Object.keys(resultData).filter(key=>key.indexOf(\"temp_\")>=0).forEach(targetKey=>{\n                                /temp_([a-zA-Z]+)_([a-zA-Z_\\d]+)/.exec(targetKey);\n                                if(!resultData[RegExp.$1+'_params']){\n                                    resultData[RegExp.$1+'_params']={};\n                                }\n                                resultData[RegExp.$1+'_params'][RegExp.$2]=resultData[targetKey];\n                                delete resultData[targetKey];\n                                //console.log(\"targetKey\",RegExp.$1,RegExp.$2)\n\n                            })\n                            console.log(\"resultData\",resultData)\n                            config.saveData(resultData);\n                        }\n                        /*this.saveData({\n                            url:'mall/merchant/create.json',\n                            method:'post',\n                            queryParam:this.form\n                        }).then(success=>{\n                            console.log(\"'mall/merchant/create.json' success\",success)\n                        },error=>{\n\n                        });*/\n                    } else {\n                        console.log('error submit!!');\n                        return false;\n                    }\n                });\n            },\n            cancle(){\n                let config = this.$attrs.config;\n                if(config.cancle&&typeof config.cancle==\"function\"){\n                    config.cancle(this.form);\n                }\n            },\n            resetForm(formName) {\n                this.$refs[formName].resetFields();\n            },\n            setRules(item) {\n                let that = this;\n                let validateRules = item.validateRules; //||[{\"required\":true,maxlength:8,minlength:3}]\n                if (\n                    validateRules == null ||\n                    validateRules == \"\" ||\n                    validateRules == undefined\n                ) {\n                    that.rules[item.validateProp] = [];\n                } else {\n                    //console.log(\"typeof validateRules\",typeof validateRules)\n                    if (typeof validateRules === \"string\") {\n                        validateRules = JSON.parse(validateRules);\n                    }\n                    if (validateRules.length > 0) {\n                        let errorMessageMap = that.validate.errorMessageMap;\n                        let allRuleInOne = {};\n                        let allErrorInOne = {};\n                        let itemValidatorFunctions = [];\n                        validateRules.forEach(rule => {\n                            if (typeof rule.validator === \"function\") {\n                                let wrapValidatorFunction = {\n                                    trigger: rule.trigger || \"change\",\n                                    allErrorInOne: allErrorInOne,\n                                    validator: (validator, value, callback) => {\n                                        let errorMessage = rule.validator(\n                                            validator,\n                                            value,\n                                            callback,\n                                            validate,\n                                            allRuleInOne,\n                                            that.form\n                                        );\n                                        errorMessage &&\n                                        errorMessage.then(data => {\n                                            if (data.code == 1) {\n                                                callback();\n                                            } else {\n                                                callback(\n                                                    new Error(\n                                                        (validator.allErrorInOne &&\n                                                            validator.allErrorInOne[data.errorCode]) ||\n                                                        data.msg\n                                                    )\n                                                );\n                                            }\n                                        });\n                                    }\n                                };\n                                itemValidatorFunctions.push(wrapValidatorFunction);\n                            } else {\n                                Object.keys(rule).forEach(validateItem => {\n                                    let tipMessage = errorMessageMap[validateItem];\n                                    if (typeof tipMessage == \"function\") {\n                                        allErrorInOne[validateItem] = errorMessageMap[validateItem]({\n                                            label: item.label,\n                                            length: rule[validateItem]\n                                        });\n                                    } else {\n                                        //console.log(\"***************\",rule)\n                                        allErrorInOne[validateItem] = errorMessageMap[validateItem];\n                                    }\n                                });\n                                allRuleInOne = Object.assign(allRuleInOne, rule);\n                            }\n                        });\n                        let tempValidator = {\n                            trigger: \"change\",\n                            allErrorInOne: allErrorInOne,\n                            validator: (validator, value, callback) => {\n                                //console.log(\"addInputList\",validator,value)\n                                let errorMessage = validate.validator(\n                                    value,\n                                    allRuleInOne,\n                                    that.form\n                                );\n                                errorMessage.then(data => {\n                                    if (data.code == 1) {\n                                        callback();\n                                    } else {\n                                        callback(\n                                            new Error(\n                                                (validator.allErrorInOne &&\n                                                    validator.allErrorInOne[data.errorCode]) ||\n                                                data.msg\n                                            )\n                                        );\n                                    }\n                                });\n                            }\n                        };\n                        that.rules[item.validateProp || item.prop] = [\n                            allRuleInOne[\"required\"]\n                                ? { required: true, message: allErrorInOne[\"required\"] }\n                                : {},\n                            ...itemValidatorFunctions,\n                            tempValidator\n                        ];\n                    }\n                }\n            },\n            saveAppSuccess(response, file, fileList,queryItem){\n                // console.log(/*response,file,fileList,*/queryItem)\n                let that=this;\n                let successUpload=queryItem.imgUploadConfig&&queryItem.imgUploadConfig.successUpload;\n                if(successUpload&& typeof successUpload == \"function\"){\n                    let checkResult=successUpload(response,file,queryItem,this.form);\n                    if(checkResult){\n                        if(checkResult instanceof Promise){\n                            checkResult.then(success=>{\n                                that.form[queryItem.prop] = success.data;\n                            },error=>{\n                                that.$msgbox(error.msg);\n                                //reject({msg:error.msg});\n                            })\n                        }\n                    }\n                }else{\n                    that.form[queryItem.prop] = response.data.fileUrls[0];\n                }\n                this.$nextTick(function(){\n                    that.loading&&that.loading.close();\n                })\n            },\n            onchangeUpload(data,data2,data3){\n               // console.log(\"onchangeUpload\",data,data2,data3)\n                this.choosedAppIcon=data;\n            },\n            uploadProgress(...params) {\n                //console.log(\"params\",...params)\n            },\n            uploadError(...params) {\n                //console.log(\"params\",...params);\n                let that=this;\n                that.$nextTick(function(){\n                    that.loading&&that.loading.close();\n                })\n                that.$message({\n                    duration:0,\n                    showClose:true,\n                    type:'error',\n                    message:'都是我不好,刚刚上传失败了,可能包太大可能网不好,请你稍后再重试!!'\n                })\n            },\n            beforeIconUpload(file,queryItem) {\n\n                let that=this;\n                //console.log(\"beforeIconUpload\",file,queryItem)\n                return new Promise(function (resolve,reject) {\n                    //console.log(that.choosedAppIcon)\n                    let beforeUpload=queryItem.imgUploadConfig&&queryItem.imgUploadConfig.beforeUpload;\n\n                    if(beforeUpload&& typeof beforeUpload == \"function\"){\n                        let checkResult=beforeUpload(file,queryItem);\n                        if(checkResult){\n                            if(checkResult instanceof Promise){\n                                checkResult.then(success=>{\n                                    resolve({code:1,msg:'success'})\n                                    that.loading = that.$loading({\n                                        lock: true,\n                                        text: 'Loading',\n                                        spinner: 'el-icon-loading',\n                                        background: 'rgba(0, 0, 0, 0.3)'\n                                    });\n                                },error=>{\n                                    that.$msgbox(error.msg);\n                                    reject({msg:error.msg});\n                                })\n                            }\n                        }\n                    }else{\n                        if(!(file.type==\"image/png\"||file.type==\"image/jpg\"||file.type==\"image/jpeg\")){\n                            that.$message.error('请选择.png/jpg/jpeg图片');\n                            reject({msg:\"please choose png image\"});\n                        }\n                    }\n\n                    //console.log(\"beforeIconUpload111\",file,queryItem)\n\n\n                    if(that.choosedAppIcon!=null&&(queryItem.imgUploadConfig&&!queryItem.imgUploadConfig.notImage||queryItem.imgUploadConfig==null)){\n                        let choosedImage=that.choosedAppIcon;\n                       // console.log(\"beforeIconUpload22\",choosedImage)\n\n                        let readResult=new FileReader();\n                        readResult.onload=function(data){\n                            let fileData=data.target.result;\n                            let image=new Image();\n                            image.src=fileData;\n                            image.onload=data=>{\n                                let imageData=data.path&&data.path[0]||data.target;\n                                let imageWidth=imageData.width,imageHeight=imageData.height;\n                                let beforeUploadImageSize=queryItem.imgUploadConfig&&queryItem.imgUploadConfig.beforeUploadImageSize;\n                                if(beforeUploadImageSize&& typeof beforeUploadImageSize == \"function\"){\n                                    let checkResult=beforeUploadImageSize(imageWidth,imageHeight,file,queryItem);\n                                    if(checkResult){\n                                        if(checkResult instanceof Promise){\n                                            return checkResult.then(success=>{\n                                                that.loading = that.$loading({\n                                                    lock: true,\n                                                    text: 'Loading',\n                                                    spinner: 'el-icon-loading',\n                                                    background: 'rgba(0, 0, 0, 0.3)'\n                                                });\n                                                resolve({msg:\"success\"})\n                                            },error=>{\n                                                that.$msgbox(error.msg);\n                                                reject({msg:error.msg});\n                                            })\n                                        }\n                                    }\n                                }else{\n                                    if(!(file.type==\"image/png\"||file.type==\"image/jpg\"||file.type==\"image/jpeg\")){\n                                        that.$message.error('请选择.png/jpg/jpeg图片');\n                                        reject({msg:\"please choose png image\"});\n                                    }\n                                }\n\n                                if(queryItem.imgUploadConfig&&(queryItem.imgUploadConfig.width!=undefined)&&queryItem.imgUploadConfig.height!=undefined&&(imageWidth!=queryItem.imgUploadConfig.width||imageHeight!=queryItem.imgUploadConfig.height)){\n                                    let errorMessage='图片大小必须为'+queryItem.imgUploadConfig.width+'px*'+queryItem.imgUploadConfig.height+'px';\n                                    that.$msgbox(errorMessage);\n                                    reject({msg:errorMessage});\n                                }else{\n                                    that.loading = that.$loading({\n                                        lock: true,\n                                        text: 'Loading',\n                                        spinner: 'el-icon-loading',\n                                        background: 'rgba(0, 0, 0, 0.3)'\n                                    });\n                                    resolve({msg:\"success\"})\n                                }\n                            }\n                        }\n                        readResult.readAsDataURL(file);\n                    }\n                })\n\n            },\n            dataBus(props,data){\n                //console.log(\"************\",props,data)\n                this.form[props.prop]=data&&data.join(\"||||\")||\"\";\n            },\n            initPage(){\n                let that=this;\n\n                let config=this.$attrs.config;\n\n                //console.log(\"*****************initPage*******************\")\n\n                that.readonly=config.readonly||false;\n                this.queryElements=config.queryElements;\n                this.queryElements.forEach(item=>{\n                    //item.readonly=config.readonly||true;\n                    if(item.type=='button'||item.type=='search'){\n\n                    }else if(item.type=='composite'){\n                        item.components.forEach(component=>{\n                            that.$set(that.form,component.prop,component.default||component.defaultValue||'');\n                            that.setRules(component);\n                        })\n                    }else{\n                        that.$set(that.form,item.prop,item.default||item.defaultValue||'');\n                        that.setRules(item);\n                        if(item.switchElements&& item.switchElements instanceof  Array){\n                            item.switchElements.forEach(i=>{\n                                that.$set(that.form,i.prop,i.default||'');\n                                that.setRules(i);\n                            })\n                        }\n                    }\n                    if(item.dataBus){\n                        item.dataBus=that.dataBus;\n                        if(item.type=='addImages'){\n                            item.imagesListConfig.dataBus=that.dataBus;\n                        }\n                    }\n                });\n                this.initQueryElement();\n                let formData=config.formData;\n                if(formData){\n                    Object.keys(formData).forEach(key=>{\n                        that.$set(that.form,key,formData[key]);\n                    })\n                }\n            },\n            groupedStyle(groupElements){\n                let groupStyle=null;\n                groupElements.forEach(item=>{\n                    if(!groupStyle&&item.groupedStyle){\n                        groupStyle=item.groupedStyle;\n                    }\n                })\n                //console.log(\"groupElements\",groupElements)\n                return groupStyle||{border:'1px dashed #eeee',display:'inline-block',width:'80%',marginLeft:'10%',background:'linear-gradient(#67c23a61, #409eff8c)',marginBottom:'0px'};\n            },\n            elementWatch(queryItem){\n                let that=this;\n                if((!queryItem.watch)||Object.keys(queryItem.watch).length==0) return true;//没有观察对象或观察对象没有键值对\n\n                let watchProps=Object.keys(queryItem.watch.watchValue);\n\n                let allCheckResult=watchProps.map(prop=>{\n                    // 如果 观察属性没有配置值 默认展示 {name:null}\n                    // 如果 观察属性map配置值 默认展示 {state:{1:true,2:true,5:true,8:false}}\n                    // 如果 观察属性函数配置值 默认展示 {state:data=>{}}\n                    let propWatchConfig=queryItem.watch.watchValue[prop];\n                    //console.log(prop,\" _.type(propWatchConfig)\",propWatchConfig, _.isMap(propWatchConfig), _.isFunction(propWatchConfig))\n                    if(propWatchConfig){\n                        if(_.isFunction(propWatchConfig)){\n                            return propWatchConfig(prop,that.form,queryItem);\n                        }else{\n                            return propWatchConfig[that.form[prop]]!=true\n                        }\n                    }\n                });\n                return allCheckResult.filter(item=>item==true).length==0\n            },\n        },\n        created() {\n            let that=this;\n            that.initPage();\n\n            this.$watch(\"$attrs.config.queryElements\",function (newValue,oldValue) {\n                that.initPage();\n            },{\n                deep:false\n            })\n\n            this.$watch(\"$attrs.config.formData\",function (newValue,oldValue) {\n                if(newValue){\n                    Object.keys(newValue).forEach(key=>{\n                        that.$set(that.form,key,newValue[key]);\n                    })\n                }\n            },{\n                deep:true\n            })\n        },\n        computed:{\n            elementGroup(){\n                this.$attrs.config.queryElements.map((item,seq)=>{item.order=seq*10000})\n                let allElements=_.flatten(Object.values(this.tempQueryElements)).concat(this.$attrs.config.queryElements);\n                allElements=_.sortBy(allElements,item=>item.order);\n                return _.groupBy(allElements,item=>item.groupedName)\n            },\n            allElement(){\n                /*let allElements=_.flatten(Object.values(this.elementGroup));\n                allElements=_.sortBy(allElements,item=>item.order);\n                let cloneAllElements=_.cloneDeep(allElements);\n\n                cloneAllElements.map(item=>{\n                    Object.keys(item).forEach(key=>{\n                        if(key.indexOf(\"Handler\")){\n                            item[key]=item[key].toString();\n                        }\n                    })\n                })*/\n\n                return [];\n            },\n\n        }\n    }\n</script>\n\n<style>\n    #container {\n        height: 300px;\n        width:800px;\n    }\n\n    .queryElement{\n        display: block;\n        width: 100%;\n        border:0px solid #f00;\n    }\n\n    .tableClass{\n        width: 1060px;\n        display: inline-block;\n    }\n    .searchContainer{\n        text-align: left;\n    }\n    .readonlyContainer .searchContainer{\n        margin: 0px 10%;\n        padding: 40px 10px;\n        border: 1px dotted #ecf5ff;\n        border-radius: 5px;\n        text-align: left;\n    }\n    .readonlyContainer .searchContainer .el-form-item{\n        border-bottom: 1px solid #ecf5ff;\n        padding-bottom: 20px;\n    }\n    .readonlyContainer .el-form > div.el-form-item{\n        border-bottom: 0px solid #ecf5ff;\n        padding-top: 50px;\n    }\n    .readonlyContainer .el-form-item__content{\n        color:#909399;\n    }\n    .readonlyContainer input[disabled='disabled'][type='text'] {\n        background-color: #eef1f6!important;\n        border-color: #d1dbe5!important;\n        color: #24252f;\n        cursor: not-allowed;\n        border: 0px solid #f00!important;\n        background: #fff!important;\n    }\n    .readonlyContainer .el-input__suffix,.readonlyContainer .el-upload__tip{\n        display: none!important;\n    }\n    .readonlyContainer .el-form-item__label{\n        font-weight: bold;\n        padding-right: 5px;\n    }\n    .tipMessage{\n        display: inline-block;font-size: 12px;padding-left: 15px;color:#50bfff;\n    }\n\n    .composite{\n        display: inline-block;\n        width: 100%;\n    }\n    .composite .el-form-item{\n        position: relative;\n        display: inline-block;\n    }\n    .composite .el-form-item:nth-child(2) .el-form-item__content{\n        margin-left: 0px!important;\n    }\n    .composite .el-input, .composite .el-input__inner{\n        width: auto!important;\n    }\n\n    .h1Lable .el-form-item__label{\n        font-size: 34px;\n    }\n    .h2Lable .el-form-item__label{\n        font-size: 30px;\n    }\n    .h3Lable .el-form-item__label{\n        font-size: 18px;\n    }\n    .is-disabled .el-icon-caret-top{\n        display: none;\n    }\n    .hideTime input[placeholder=\"结束时间\"]{\n        display: none;\n    }\n    .editorOperateContainer{\n        display: none;\n    }\n    .editorModule:hover .editorOperateContainer{\n        display: flex;\n        position: absolute;\n        right: 10px;\n        text-align: right;\n        width: 200px;\n        height: 100%;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: center;\n        font-size: 14px;\n        z-index: 1;\n    }\n\n    .editorOperateContainer>span{\n        cursor: pointer;\n        font-size: 13px;\n    }\n</style>\n"]}]}